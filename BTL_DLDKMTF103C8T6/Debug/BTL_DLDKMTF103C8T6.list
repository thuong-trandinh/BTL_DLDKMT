
BTL_DLDKMTF103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005214  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005320  08005320  00006320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005350  08005350  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  08005350  08005350  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005350  08005350  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005350  08005350  00006350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005354  08005354  00006354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005358  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001864  2000005c  080053b4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018c0  080053b4  000078c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e3c  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247d  00000000  00000000  00017ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001a340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d91  00000000  00000000  0001b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018860  00000000  00000000  0001c1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b0d  00000000  00000000  00034a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eaa3  00000000  00000000  00049566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8009  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc8  00000000  00000000  000d804c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000dcd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005308 	.word	0x08005308

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005308 	.word	0x08005308

0800014c <Calculate_CRC16>:


#include "Frame.h"


uint16_t Calculate_CRC16(uint8_t *data, uint16_t length) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000158:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 800015e:	2300      	movs	r3, #0
 8000160:	81bb      	strh	r3, [r7, #12]
 8000162:	e025      	b.n	80001b0 <Calculate_CRC16+0x64>
        crc ^= (uint16_t)(data[i] << 8);  // Sử dụng data[i] cho rõ ràng
 8000164:	89bb      	ldrh	r3, [r7, #12]
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	4413      	add	r3, r2
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	021b      	lsls	r3, r3, #8
 800016e:	b29a      	uxth	r2, r3
 8000170:	89fb      	ldrh	r3, [r7, #14]
 8000172:	4053      	eors	r3, r2
 8000174:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000176:	2300      	movs	r3, #0
 8000178:	72fb      	strb	r3, [r7, #11]
 800017a:	e013      	b.n	80001a4 <Calculate_CRC16+0x58>
            if (crc & 0x8000)
 800017c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000180:	2b00      	cmp	r3, #0
 8000182:	da09      	bge.n	8000198 <Calculate_CRC16+0x4c>
                crc = (crc << 1) ^ 0x1021;
 8000184:	89fb      	ldrh	r3, [r7, #14]
 8000186:	005b      	lsls	r3, r3, #1
 8000188:	b21b      	sxth	r3, r3
 800018a:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 800018e:	f083 0301 	eor.w	r3, r3, #1
 8000192:	b21b      	sxth	r3, r3
 8000194:	81fb      	strh	r3, [r7, #14]
 8000196:	e002      	b.n	800019e <Calculate_CRC16+0x52>
            else
                crc = crc << 1;
 8000198:	89fb      	ldrh	r3, [r7, #14]
 800019a:	005b      	lsls	r3, r3, #1
 800019c:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 800019e:	7afb      	ldrb	r3, [r7, #11]
 80001a0:	3301      	adds	r3, #1
 80001a2:	72fb      	strb	r3, [r7, #11]
 80001a4:	7afb      	ldrb	r3, [r7, #11]
 80001a6:	2b07      	cmp	r3, #7
 80001a8:	d9e8      	bls.n	800017c <Calculate_CRC16+0x30>
    for (uint16_t i = 0; i < length; i++) {
 80001aa:	89bb      	ldrh	r3, [r7, #12]
 80001ac:	3301      	adds	r3, #1
 80001ae:	81bb      	strh	r3, [r7, #12]
 80001b0:	89ba      	ldrh	r2, [r7, #12]
 80001b2:	887b      	ldrh	r3, [r7, #2]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d3d5      	bcc.n	8000164 <Calculate_CRC16+0x18>
        }
    }
    return crc;
 80001b8:	89fb      	ldrh	r3, [r7, #14]
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr

080001c4 <packframe>:
void packframe(uint8_t *outbuf, frame_t  *trans,uint8_t *payload, uint8_t command){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	607a      	str	r2, [r7, #4]
 80001d0:	70fb      	strb	r3, [r7, #3]
	trans->start_bit=0xAA;
 80001d2:	68bb      	ldr	r3, [r7, #8]
 80001d4:	22aa      	movs	r2, #170	@ 0xaa
 80001d6:	701a      	strb	r2, [r3, #0]
	trans->end = 0xAF;
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80001de:	22af      	movs	r2, #175	@ 0xaf
 80001e0:	f883 238e 	strb.w	r2, [r3, #910]	@ 0x38e
	outbuf[0] = trans->start_bit;
 80001e4:	68bb      	ldr	r3, [r7, #8]
 80001e6:	781a      	ldrb	r2, [r3, #0]
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	701a      	strb	r2, [r3, #0]
	trans->command = command;
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	78fa      	ldrb	r2, [r7, #3]
 80001f0:	705a      	strb	r2, [r3, #1]
	outbuf[1] = trans->command;
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	3301      	adds	r3, #1
 80001f6:	68ba      	ldr	r2, [r7, #8]
 80001f8:	7852      	ldrb	r2, [r2, #1]
 80001fa:	701a      	strb	r2, [r3, #0]
	outbuf[2] = (uint8_t)(trans->length >> 8)&0xFF; // MSB
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	885b      	ldrh	r3, [r3, #2]
 8000200:	0a1b      	lsrs	r3, r3, #8
 8000202:	b29a      	uxth	r2, r3
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	3302      	adds	r3, #2
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	701a      	strb	r2, [r3, #0]
	outbuf[3] = (uint8_t)(trans->length & 0xFF);
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	885a      	ldrh	r2, [r3, #2]
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	3303      	adds	r3, #3
 8000214:	b2d2      	uxtb	r2, r2
 8000216:	701a      	strb	r2, [r3, #0]
	// Copy payload vào frame (nếu có)
	for(uint8_t i = 0;i < trans->length;i++){
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
 800021c:	e00b      	b.n	8000236 <packframe+0x72>
		trans->payload[i] = payload[i];
 800021e:	7dfb      	ldrb	r3, [r7, #23]
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	441a      	add	r2, r3
 8000224:	7dfb      	ldrb	r3, [r7, #23]
 8000226:	7811      	ldrb	r1, [r2, #0]
 8000228:	68ba      	ldr	r2, [r7, #8]
 800022a:	4413      	add	r3, r2
 800022c:	460a      	mov	r2, r1
 800022e:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0;i < trans->length;i++){
 8000230:	7dfb      	ldrb	r3, [r7, #23]
 8000232:	3301      	adds	r3, #1
 8000234:	75fb      	strb	r3, [r7, #23]
 8000236:	7dfb      	ldrb	r3, [r7, #23]
 8000238:	b29a      	uxth	r2, r3
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	885b      	ldrh	r3, [r3, #2]
 800023e:	429a      	cmp	r2, r3
 8000240:	d3ed      	bcc.n	800021e <packframe+0x5a>
	}
	if (trans->payload != NULL && trans->length > 0) {
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	3304      	adds	r3, #4
 8000246:	2b00      	cmp	r3, #0
 8000248:	d00c      	beq.n	8000264 <packframe+0xa0>
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	885b      	ldrh	r3, [r3, #2]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <packframe+0xa0>
	    memcpy(&outbuf[4], trans->payload, trans->length);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	1d18      	adds	r0, r3, #4
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	1d19      	adds	r1, r3, #4
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	885b      	ldrh	r3, [r3, #2]
 800025e:	461a      	mov	r2, r3
 8000260:	f004 fffc 	bl	800525c <memcpy>
	}
	trans->CRC_16 = Calculate_CRC16(&outbuf[1],trans->length + 3); // temp ktr xiu nua xoa
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	1c5a      	adds	r2, r3, #1
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	885b      	ldrh	r3, [r3, #2]
 800026c:	3303      	adds	r3, #3
 800026e:	b29b      	uxth	r3, r3
 8000270:	4619      	mov	r1, r3
 8000272:	4610      	mov	r0, r2
 8000274:	f7ff ff6a 	bl	800014c <Calculate_CRC16>
 8000278:	4603      	mov	r3, r0
 800027a:	461a      	mov	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000282:	f8a3 238c 	strh.w	r2, [r3, #908]	@ 0x38c
	outbuf[trans->length + 4] = ((trans->CRC_16)>>8)&0xFF;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800028c:	f8b3 338c 	ldrh.w	r3, [r3, #908]	@ 0x38c
 8000290:	0a1b      	lsrs	r3, r3, #8
 8000292:	b299      	uxth	r1, r3
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	885b      	ldrh	r3, [r3, #2]
 8000298:	3304      	adds	r3, #4
 800029a:	68fa      	ldr	r2, [r7, #12]
 800029c:	4413      	add	r3, r2
 800029e:	b2ca      	uxtb	r2, r1
 80002a0:	701a      	strb	r2, [r3, #0]
	outbuf[trans->length + 5] = trans->CRC_16&0xFF;
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80002a8:	f8b3 138c 	ldrh.w	r1, [r3, #908]	@ 0x38c
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	885b      	ldrh	r3, [r3, #2]
 80002b0:	3305      	adds	r3, #5
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	4413      	add	r3, r2
 80002b6:	b2ca      	uxtb	r2, r1
 80002b8:	701a      	strb	r2, [r3, #0]
	outbuf[6 + trans->length] = trans->end;
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	885b      	ldrh	r3, [r3, #2]
 80002be:	3306      	adds	r3, #6
 80002c0:	461a      	mov	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	4413      	add	r3, r2
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80002cc:	f892 238e 	ldrb.w	r2, [r2, #910]	@ 0x38e
 80002d0:	701a      	strb	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	3718      	adds	r7, #24
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <Decode_frame>:
void Decode_frame(uint8_t *outbuf, frame_t *trans){
 80002da:	b480      	push	{r7}
 80002dc:	b085      	sub	sp, #20
 80002de:	af00      	add	r7, sp, #0
 80002e0:	6078      	str	r0, [r7, #4]
 80002e2:	6039      	str	r1, [r7, #0]
	trans->start_bit = outbuf[0];
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	781a      	ldrb	r2, [r3, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	701a      	strb	r2, [r3, #0]
	trans->command = outbuf[1];
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	785a      	ldrb	r2, [r3, #1]
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	705a      	strb	r2, [r3, #1]
	trans->length = (outbuf[2]<<8)|outbuf[3];
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3302      	adds	r3, #2
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	021b      	lsls	r3, r3, #8
 80002fc:	b21a      	sxth	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3303      	adds	r3, #3
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b21b      	sxth	r3, r3
 8000306:	4313      	orrs	r3, r2
 8000308:	b21b      	sxth	r3, r3
 800030a:	b29a      	uxth	r2, r3
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	805a      	strh	r2, [r3, #2]
	trans->CRC_16 = (outbuf[4 + trans->length]<<8)|outbuf[5 + trans->length];
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	885b      	ldrh	r3, [r3, #2]
 8000314:	3304      	adds	r3, #4
 8000316:	461a      	mov	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4413      	add	r3, r2
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	021b      	lsls	r3, r3, #8
 8000320:	b21a      	sxth	r2, r3
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	885b      	ldrh	r3, [r3, #2]
 8000326:	3305      	adds	r3, #5
 8000328:	4619      	mov	r1, r3
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	440b      	add	r3, r1
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b21b      	sxth	r3, r3
 8000332:	4313      	orrs	r3, r2
 8000334:	b21b      	sxth	r3, r3
 8000336:	b29a      	uxth	r2, r3
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800033e:	f8a3 238c 	strh.w	r2, [r3, #908]	@ 0x38c
	trans->end = outbuf[6 + trans->length];
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	885b      	ldrh	r3, [r3, #2]
 8000346:	3306      	adds	r3, #6
 8000348:	461a      	mov	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	781a      	ldrb	r2, [r3, #0]
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000356:	f883 238e 	strb.w	r2, [r3, #910]	@ 0x38e
	for(int i = 0;i < trans->length;i++){
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	e00d      	b.n	800037c <Decode_frame+0xa2>
		trans->payload[i] = outbuf[i + 4];
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	3304      	adds	r3, #4
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	7819      	ldrb	r1, [r3, #0]
 800036a:	683a      	ldr	r2, [r7, #0]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	4413      	add	r3, r2
 8000370:	3304      	adds	r3, #4
 8000372:	460a      	mov	r2, r1
 8000374:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i < trans->length;i++){
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	3301      	adds	r3, #1
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	885b      	ldrh	r3, [r3, #2]
 8000380:	461a      	mov	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	4293      	cmp	r3, r2
 8000386:	dbeb      	blt.n	8000360 <Decode_frame+0x86>
	}
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <Decode_Payload>:
void Decode_Payload(uint8_t *outbuf, frame_t *trans,uint16_t *addr,uint8_t *bytes){
 8000394:	b480      	push	{r7}
 8000396:	b087      	sub	sp, #28
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
 80003a0:	603b      	str	r3, [r7, #0]
	*addr = (trans->payload[0]<<8)|(trans->payload[1]);
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	791b      	ldrb	r3, [r3, #4]
 80003a6:	021b      	lsls	r3, r3, #8
 80003a8:	b21a      	sxth	r2, r3
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	795b      	ldrb	r3, [r3, #5]
 80003ae:	b21b      	sxth	r3, r3
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b21b      	sxth	r3, r3
 80003b4:	b29a      	uxth	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	801a      	strh	r2, [r3, #0]
	if(*bytes <= 0){
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d104      	bne.n	80003cc <Decode_Payload+0x38>
		*bytes = trans->payload[2];
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	799a      	ldrb	r2, [r3, #6]
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	701a      	strb	r2, [r3, #0]
		return;
 80003ca:	e017      	b.n	80003fc <Decode_Payload+0x68>
	}else{
		*bytes = trans->payload[2];
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	799a      	ldrb	r2, [r3, #6]
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0;i < *bytes; i++){
 80003d4:	2300      	movs	r3, #0
 80003d6:	75fb      	strb	r3, [r7, #23]
 80003d8:	e00b      	b.n	80003f2 <Decode_Payload+0x5e>
			outbuf[i] = trans->payload[i + 3];
 80003da:	7dfb      	ldrb	r3, [r7, #23]
 80003dc:	1cda      	adds	r2, r3, #3
 80003de:	7dfb      	ldrb	r3, [r7, #23]
 80003e0:	68f9      	ldr	r1, [r7, #12]
 80003e2:	440b      	add	r3, r1
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	440a      	add	r2, r1
 80003e8:	7912      	ldrb	r2, [r2, #4]
 80003ea:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0;i < *bytes; i++){
 80003ec:	7dfb      	ldrb	r3, [r7, #23]
 80003ee:	3301      	adds	r3, #1
 80003f0:	75fb      	strb	r3, [r7, #23]
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	7dfa      	ldrb	r2, [r7, #23]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d3ee      	bcc.n	80003da <Decode_Payload+0x46>
		}
	}
}
 80003fc:	371c      	adds	r7, #28
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <EEPRROM_WriteBuffer>:
 *  Created on: May 3, 2025
 *      Author: HP
 */
#include "eprrom.h"

void EEPRROM_WriteBuffer(I2C_HandleTypeDef *hi2c,uint16_t start_addr,uint8_t *buf,uint8_t length){
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af04      	add	r7, sp, #16
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	461a      	mov	r2, r3
 8000410:	460b      	mov	r3, r1
 8000412:	817b      	strh	r3, [r7, #10]
 8000414:	4613      	mov	r3, r2
 8000416:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Mem_Write(hi2c, 0xA0, start_addr, length, buf, 8, 20);
 8000418:	7a7b      	ldrb	r3, [r7, #9]
 800041a:	b299      	uxth	r1, r3
 800041c:	897a      	ldrh	r2, [r7, #10]
 800041e:	2314      	movs	r3, #20
 8000420:	9302      	str	r3, [sp, #8]
 8000422:	2308      	movs	r3, #8
 8000424:	9301      	str	r3, [sp, #4]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	460b      	mov	r3, r1
 800042c:	21a0      	movs	r1, #160	@ 0xa0
 800042e:	68f8      	ldr	r0, [r7, #12]
 8000430:	f001 fcc6 	bl	8001dc0 <HAL_I2C_Mem_Write>
}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <EEPRROM_ReadBuffer>:
void EEPRROM_ReadBuffer(I2C_HandleTypeDef *hi2c,uint16_t start_addr,uint8_t *buf,uint8_t length){
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af04      	add	r7, sp, #16
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	607a      	str	r2, [r7, #4]
 8000446:	461a      	mov	r2, r3
 8000448:	460b      	mov	r3, r1
 800044a:	817b      	strh	r3, [r7, #10]
 800044c:	4613      	mov	r3, r2
 800044e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Mem_Read(hi2c, 0xA1, start_addr, length, buf, 8, 20);
 8000450:	7a7b      	ldrb	r3, [r7, #9]
 8000452:	b299      	uxth	r1, r3
 8000454:	897a      	ldrh	r2, [r7, #10]
 8000456:	2314      	movs	r3, #20
 8000458:	9302      	str	r3, [sp, #8]
 800045a:	2308      	movs	r3, #8
 800045c:	9301      	str	r3, [sp, #4]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	460b      	mov	r3, r1
 8000464:	21a1      	movs	r1, #161	@ 0xa1
 8000466:	68f8      	ldr	r0, [r7, #12]
 8000468:	f001 fda4 	bl	8001fb4 <HAL_I2C_Mem_Read>
}
 800046c:	bf00      	nop
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <HAL_UARTEx_RxEventCallback>:
	if (htim == &htim1 && is_transmitting == 0 && tran_data != NULL) {
	        is_transmitting = 1;  // Đánh dấu đang truyền
	        HAL_UART_Transmit_DMA(&huart2, tran_data,transmit.length + 7);
	}
}
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	460b      	mov	r3, r1
 800047e:	807b      	strh	r3, [r7, #2]
	if (huart != &huart2) return;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a0c      	ldr	r2, [pc, #48]	@ (80004b4 <HAL_UARTEx_RxEventCallback+0x40>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d111      	bne.n	80004ac <HAL_UARTEx_RxEventCallback+0x38>

	    // nếu là half‑transfer (Size gần bằng half buffer) thì bỏ qua
	if (Size < 7) {
 8000488:	887b      	ldrh	r3, [r7, #2]
 800048a:	2b06      	cmp	r3, #6
 800048c:	d805      	bhi.n	800049a <HAL_UARTEx_RxEventCallback+0x26>
	        // re‑arm DMA và exit
	    HAL_UARTEx_ReceiveToIdle_DMA(huart, RX_data, sizeof(RX_data));
 800048e:	2264      	movs	r2, #100	@ 0x64
 8000490:	4909      	ldr	r1, [pc, #36]	@ (80004b8 <HAL_UARTEx_RxEventCallback+0x44>)
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f003 fe78 	bl	8004188 <HAL_UARTEx_ReceiveToIdle_DMA>
	    return;
 8000498:	e009      	b.n	80004ae <HAL_UARTEx_RxEventCallback+0x3a>
	}
	check_flag_complete_transmit = 1;
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <HAL_UARTEx_RxEventCallback+0x48>)
 800049c:	2201      	movs	r2, #1
 800049e:	701a      	strb	r2, [r3, #0]
	//SendADCValue(&transmit); // sua cai nay
//	frameSize = 7 + transmit.length*4; //
//	tran_data = calloc(frameSize,sizeof(uint8_t));
//	packframe(tran_data, &transmit, 0x20);
//	HAL_TIM_Base_Start_IT(&htim1);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_data, 100);
 80004a0:	2264      	movs	r2, #100	@ 0x64
 80004a2:	4905      	ldr	r1, [pc, #20]	@ (80004b8 <HAL_UARTEx_RxEventCallback+0x44>)
 80004a4:	4803      	ldr	r0, [pc, #12]	@ (80004b4 <HAL_UARTEx_RxEventCallback+0x40>)
 80004a6:	f003 fe6f 	bl	8004188 <HAL_UARTEx_ReceiveToIdle_DMA>
 80004aa:	e000      	b.n	80004ae <HAL_UARTEx_RxEventCallback+0x3a>
	if (huart != &huart2) return;
 80004ac:	bf00      	nop
}
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20001698 	.word	0x20001698
 80004b8:	20001408 	.word	0x20001408
 80004bc:	200015a0 	.word	0x200015a0

080004c0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a07      	ldr	r2, [pc, #28]	@ (80004e8 <HAL_UART_TxCpltCallback+0x28>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d107      	bne.n	80004e0 <HAL_UART_TxCpltCallback+0x20>
        free(tran_data);
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <HAL_UART_TxCpltCallback+0x2c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f004 fdc7 	bl	8005068 <free>
        is_transmitting = 0;
 80004da:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <HAL_UART_TxCpltCallback+0x30>)
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
    }
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20001698 	.word	0x20001698
 80004ec:	2000146c 	.word	0x2000146c
 80004f0:	20001472 	.word	0x20001472

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fd55 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f8eb 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 fa79 	bl	80009f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000506:	f000 fa51 	bl	80009ac <MX_DMA_Init>
  MX_SPI1_Init();
 800050a:	f000 f94f 	bl	80007ac <MX_SPI1_Init>
  MX_TIM1_Init();
 800050e:	f000 f983 	bl	8000818 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000512:	f000 fa21 	bl	8000958 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000516:	f000 f91b 	bl	8000750 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_data, 100);
 800051a:	2264      	movs	r2, #100	@ 0x64
 800051c:	4961      	ldr	r1, [pc, #388]	@ (80006a4 <main+0x1b0>)
 800051e:	4862      	ldr	r0, [pc, #392]	@ (80006a8 <main+0x1b4>)
 8000520:	f003 fe32 	bl	8004188 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* USER CODE END 2 */
  uint8_t check[] = {1,2,3};
 8000524:	4a61      	ldr	r2, [pc, #388]	@ (80006ac <main+0x1b8>)
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	4611      	mov	r1, r2
 800052c:	8019      	strh	r1, [r3, #0]
 800052e:	3302      	adds	r3, #2
 8000530:	0c12      	lsrs	r2, r2, #16
 8000532:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 8,check , 3, 100);
 8000534:	2364      	movs	r3, #100	@ 0x64
 8000536:	9302      	str	r3, [sp, #8]
 8000538:	2303      	movs	r3, #3
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2308      	movs	r3, #8
 8000542:	2200      	movs	r2, #0
 8000544:	21a0      	movs	r1, #160	@ 0xa0
 8000546:	485a      	ldr	r0, [pc, #360]	@ (80006b0 <main+0x1bc>)
 8000548:	f001 fc3a 	bl	8001dc0 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Read(&hi2c1, 0xA1, 0, 8,check_data, 3, 100);
 800054c:	2364      	movs	r3, #100	@ 0x64
 800054e:	9302      	str	r3, [sp, #8]
 8000550:	2303      	movs	r3, #3
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	4b57      	ldr	r3, [pc, #348]	@ (80006b4 <main+0x1c0>)
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2308      	movs	r3, #8
 800055a:	2200      	movs	r2, #0
 800055c:	21a1      	movs	r1, #161	@ 0xa1
 800055e:	4854      	ldr	r0, [pc, #336]	@ (80006b0 <main+0x1bc>)
 8000560:	f001 fd28 	bl	8001fb4 <HAL_I2C_Mem_Read>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(check_flag_complete_transmit == 1){
 8000564:	4b54      	ldr	r3, [pc, #336]	@ (80006b8 <main+0x1c4>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d1fb      	bne.n	8000564 <main+0x70>
		  uint16_t addr = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	807b      	strh	r3, [r7, #2]
		  	uint8_t bytes = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	707b      	strb	r3, [r7, #1]
		  	//uint32_t rx_data = 0;
		  	Decode_frame(RX_data, &transmit);
 8000574:	4951      	ldr	r1, [pc, #324]	@ (80006bc <main+0x1c8>)
 8000576:	484b      	ldr	r0, [pc, #300]	@ (80006a4 <main+0x1b0>)
 8000578:	f7ff feaf 	bl	80002da <Decode_frame>
		  	switch(transmit.command){
 800057c:	4b4f      	ldr	r3, [pc, #316]	@ (80006bc <main+0x1c8>)
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	3b21      	subs	r3, #33	@ 0x21
 8000582:	2b10      	cmp	r3, #16
 8000584:	f200 8089 	bhi.w	800069a <main+0x1a6>
 8000588:	a201      	add	r2, pc, #4	@ (adr r2, 8000590 <main+0x9c>)
 800058a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058e:	bf00      	nop
 8000590:	080005d5 	.word	0x080005d5
 8000594:	080005df 	.word	0x080005df
 8000598:	080005e9 	.word	0x080005e9
 800059c:	0800069b 	.word	0x0800069b
 80005a0:	0800069b 	.word	0x0800069b
 80005a4:	0800069b 	.word	0x0800069b
 80005a8:	0800069b 	.word	0x0800069b
 80005ac:	0800069b 	.word	0x0800069b
 80005b0:	0800069b 	.word	0x0800069b
 80005b4:	0800069b 	.word	0x0800069b
 80005b8:	0800069b 	.word	0x0800069b
 80005bc:	0800069b 	.word	0x0800069b
 80005c0:	0800069b 	.word	0x0800069b
 80005c4:	0800069b 	.word	0x0800069b
 80005c8:	0800069b 	.word	0x0800069b
 80005cc:	080005f3 	.word	0x080005f3
 80005d0:	08000625 	.word	0x08000625
		  	case 0x21:
		  		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80005d4:	2108      	movs	r1, #8
 80005d6:	483a      	ldr	r0, [pc, #232]	@ (80006c0 <main+0x1cc>)
 80005d8:	f001 fa94 	bl	8001b04 <HAL_GPIO_TogglePin>
		  		break;
 80005dc:	e05d      	b.n	800069a <main+0x1a6>
		  	case 0x22:
		  		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);
 80005de:	2110      	movs	r1, #16
 80005e0:	4837      	ldr	r0, [pc, #220]	@ (80006c0 <main+0x1cc>)
 80005e2:	f001 fa8f 	bl	8001b04 <HAL_GPIO_TogglePin>
		  		break;
 80005e6:	e058      	b.n	800069a <main+0x1a6>
		  	case 0x23:
		  		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
 80005e8:	2120      	movs	r1, #32
 80005ea:	4835      	ldr	r0, [pc, #212]	@ (80006c0 <main+0x1cc>)
 80005ec:	f001 fa8a 	bl	8001b04 <HAL_GPIO_TogglePin>
		  		break;
 80005f0:	e053      	b.n	800069a <main+0x1a6>
		  	case 0x30:
		  		bytes = transmit.length - 3;
 80005f2:	4b32      	ldr	r3, [pc, #200]	@ (80006bc <main+0x1c8>)
 80005f4:	885b      	ldrh	r3, [r3, #2]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	3b03      	subs	r3, #3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	707b      	strb	r3, [r7, #1]
		  		Decode_Payload(decode_payload, &transmit, &addr, &bytes);
 80005fe:	1c7b      	adds	r3, r7, #1
 8000600:	1cba      	adds	r2, r7, #2
 8000602:	492e      	ldr	r1, [pc, #184]	@ (80006bc <main+0x1c8>)
 8000604:	482f      	ldr	r0, [pc, #188]	@ (80006c4 <main+0x1d0>)
 8000606:	f7ff fec5 	bl	8000394 <Decode_Payload>
		  		memcpy(check_da,decode_payload,bytes);
 800060a:	787b      	ldrb	r3, [r7, #1]
 800060c:	461a      	mov	r2, r3
 800060e:	492d      	ldr	r1, [pc, #180]	@ (80006c4 <main+0x1d0>)
 8000610:	482d      	ldr	r0, [pc, #180]	@ (80006c8 <main+0x1d4>)
 8000612:	f004 fe23 	bl	800525c <memcpy>
		  		EEPRROM_WriteBuffer(&hi2c1,addr,decode_payload,bytes);
 8000616:	8879      	ldrh	r1, [r7, #2]
 8000618:	787b      	ldrb	r3, [r7, #1]
 800061a:	4a2a      	ldr	r2, [pc, #168]	@ (80006c4 <main+0x1d0>)
 800061c:	4824      	ldr	r0, [pc, #144]	@ (80006b0 <main+0x1bc>)
 800061e:	f7ff fef1 	bl	8000404 <EEPRROM_WriteBuffer>
		  		break;
 8000622:	e03a      	b.n	800069a <main+0x1a6>
		  	case 0x31:
		  		bytes = transmit.length - 3;
 8000624:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <main+0x1c8>)
 8000626:	885b      	ldrh	r3, [r3, #2]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	3b03      	subs	r3, #3
 800062c:	b2db      	uxtb	r3, r3
 800062e:	707b      	strb	r3, [r7, #1]
		  		Decode_Payload(decode_payload,&transmit,&addr,&bytes);
 8000630:	1c7b      	adds	r3, r7, #1
 8000632:	1cba      	adds	r2, r7, #2
 8000634:	4921      	ldr	r1, [pc, #132]	@ (80006bc <main+0x1c8>)
 8000636:	4823      	ldr	r0, [pc, #140]	@ (80006c4 <main+0x1d0>)
 8000638:	f7ff feac 	bl	8000394 <Decode_Payload>
		  		EEPRROM_ReadBuffer(&hi2c1,addr,decode_payload,bytes);
 800063c:	8879      	ldrh	r1, [r7, #2]
 800063e:	787b      	ldrb	r3, [r7, #1]
 8000640:	4a20      	ldr	r2, [pc, #128]	@ (80006c4 <main+0x1d0>)
 8000642:	481b      	ldr	r0, [pc, #108]	@ (80006b0 <main+0x1bc>)
 8000644:	f7ff fefa 	bl	800043c <EEPRROM_ReadBuffer>
		  		tran_data = calloc(frameSize,sizeof(uint8_t));
 8000648:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <main+0x1d8>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	2101      	movs	r1, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fcee 	bl	8005030 <calloc>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <main+0x1dc>)
 800065a:	601a      	str	r2, [r3, #0]
		  		transmit.length = bytes;
 800065c:	787b      	ldrb	r3, [r7, #1]
 800065e:	461a      	mov	r2, r3
 8000660:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <main+0x1c8>)
 8000662:	805a      	strh	r2, [r3, #2]
		  		packframe(tran_data, &transmit, decode_payload, 0x31);
 8000664:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <main+0x1dc>)
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	2331      	movs	r3, #49	@ 0x31
 800066a:	4a16      	ldr	r2, [pc, #88]	@ (80006c4 <main+0x1d0>)
 800066c:	4913      	ldr	r1, [pc, #76]	@ (80006bc <main+0x1c8>)
 800066e:	f7ff fda9 	bl	80001c4 <packframe>
		  		memcpy(check_re,tran_data,transmit.length + 7);
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <main+0x1dc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a11      	ldr	r2, [pc, #68]	@ (80006bc <main+0x1c8>)
 8000678:	8852      	ldrh	r2, [r2, #2]
 800067a:	3207      	adds	r2, #7
 800067c:	4619      	mov	r1, r3
 800067e:	4815      	ldr	r0, [pc, #84]	@ (80006d4 <main+0x1e0>)
 8000680:	f004 fdec 	bl	800525c <memcpy>
		  		HAL_UART_Transmit_DMA(&huart2, tran_data, transmit.length + 7);
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <main+0x1dc>)
 8000686:	6819      	ldr	r1, [r3, #0]
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <main+0x1c8>)
 800068a:	885b      	ldrh	r3, [r3, #2]
 800068c:	3307      	adds	r3, #7
 800068e:	b29b      	uxth	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <main+0x1b4>)
 8000694:	f003 fd08 	bl	80040a8 <HAL_UART_Transmit_DMA>
		  		break;
 8000698:	bf00      	nop
		  	}
		  	check_flag_complete_transmit = 0;
 800069a:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <main+0x1c4>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	  if(check_flag_complete_transmit == 1){
 80006a0:	e760      	b.n	8000564 <main+0x70>
 80006a2:	bf00      	nop
 80006a4:	20001408 	.word	0x20001408
 80006a8:	20001698 	.word	0x20001698
 80006ac:	08005320 	.word	0x08005320
 80006b0:	200015a4 	.word	0x200015a4
 80006b4:	20001768 	.word	0x20001768
 80006b8:	200015a0 	.word	0x200015a0
 80006bc:	20000078 	.word	0x20000078
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	20001474 	.word	0x20001474
 80006c8:	200014d8 	.word	0x200014d8
 80006cc:	20001470 	.word	0x20001470
 80006d0:	2000146c 	.word	0x2000146c
 80006d4:	2000153c 	.word	0x2000153c

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b090      	sub	sp, #64	@ 0x40
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0318 	add.w	r3, r7, #24
 80006e2:	2228      	movs	r2, #40	@ 0x28
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fd74 	bl	80051d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fe:	2301      	movs	r3, #1
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000702:	2310      	movs	r3, #16
 8000704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000706:	2300      	movs	r3, #0
 8000708:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fa78 	bl	8002c04 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800071a:	f000 f9cd 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fce6 	bl	8003108 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000742:	f000 f9b9 	bl	8000ab8 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3740      	adds	r7, #64	@ 0x40
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000756:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <MX_I2C1_Init+0x54>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800075c:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <MX_I2C1_Init+0x58>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800076e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800078e:	f001 f9d3 	bl	8001b38 <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 f98e 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200015a4 	.word	0x200015a4
 80007a4:	40005400 	.word	0x40005400
 80007a8:	000186a0 	.word	0x000186a0

080007ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007b2:	4a18      	ldr	r2, [pc, #96]	@ (8000814 <MX_SPI1_Init+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007fe:	f002 fe11 	bl	8003424 <HAL_SPI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 f956 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200015f8 	.word	0x200015f8
 8000814:	40013000 	.word	0x40013000

08000818 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b096      	sub	sp, #88	@ 0x58
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2220      	movs	r2, #32
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f004 fcbf 	bl	80051d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000856:	4b3e      	ldr	r3, [pc, #248]	@ (8000950 <MX_TIM1_Init+0x138>)
 8000858:	4a3e      	ldr	r2, [pc, #248]	@ (8000954 <MX_TIM1_Init+0x13c>)
 800085a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800085c:	4b3c      	ldr	r3, [pc, #240]	@ (8000950 <MX_TIM1_Init+0x138>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b3b      	ldr	r3, [pc, #236]	@ (8000950 <MX_TIM1_Init+0x138>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000868:	4b39      	ldr	r3, [pc, #228]	@ (8000950 <MX_TIM1_Init+0x138>)
 800086a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800086e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b37      	ldr	r3, [pc, #220]	@ (8000950 <MX_TIM1_Init+0x138>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000876:	4b36      	ldr	r3, [pc, #216]	@ (8000950 <MX_TIM1_Init+0x138>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b34      	ldr	r3, [pc, #208]	@ (8000950 <MX_TIM1_Init+0x138>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000882:	4833      	ldr	r0, [pc, #204]	@ (8000950 <MX_TIM1_Init+0x138>)
 8000884:	f002 fe52 	bl	800352c <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800088e:	f000 f913 	bl	8000ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000898:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800089c:	4619      	mov	r1, r3
 800089e:	482c      	ldr	r0, [pc, #176]	@ (8000950 <MX_TIM1_Init+0x138>)
 80008a0:	f002 ffae 	bl	8003800 <HAL_TIM_ConfigClockSource>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008aa:	f000 f905 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ae:	4828      	ldr	r0, [pc, #160]	@ (8000950 <MX_TIM1_Init+0x138>)
 80008b0:	f002 fe8b 	bl	80035ca <HAL_TIM_PWM_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008ba:	f000 f8fd 	bl	8000ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008ca:	4619      	mov	r1, r3
 80008cc:	4820      	ldr	r0, [pc, #128]	@ (8000950 <MX_TIM1_Init+0x138>)
 80008ce:	f003 faeb 	bl	8003ea8 <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008d8:	f000 f8ee 	bl	8000ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008dc:	2360      	movs	r3, #96	@ 0x60
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e8:	2300      	movs	r3, #0
 80008ea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fc:	2200      	movs	r2, #0
 80008fe:	4619      	mov	r1, r3
 8000900:	4813      	ldr	r0, [pc, #76]	@ (8000950 <MX_TIM1_Init+0x138>)
 8000902:	f002 febb 	bl	800367c <HAL_TIM_PWM_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800090c:	f000 f8d4 	bl	8000ab8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000924:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000928:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4619      	mov	r1, r3
 8000932:	4807      	ldr	r0, [pc, #28]	@ (8000950 <MX_TIM1_Init+0x138>)
 8000934:	f003 fb16 	bl	8003f64 <HAL_TIMEx_ConfigBreakDeadTime>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800093e:	f000 f8bb 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000942:	4803      	ldr	r0, [pc, #12]	@ (8000950 <MX_TIM1_Init+0x138>)
 8000944:	f000 f9a8 	bl	8000c98 <HAL_TIM_MspPostInit>

}
 8000948:	bf00      	nop
 800094a:	3758      	adds	r7, #88	@ 0x58
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20001650 	.word	0x20001650
 8000954:	40012c00 	.word	0x40012c00

08000958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <MX_USART2_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000964:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000990:	f003 fb39 	bl	8004006 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f88d 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20001698 	.word	0x20001698
 80009a8:	40004400 	.word	0x40004400

080009ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <MX_DMA_Init+0x48>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <MX_DMA_Init+0x48>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <MX_DMA_Init+0x48>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2010      	movs	r0, #16
 80009d0:	f000 fc23 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80009d4:	2010      	movs	r0, #16
 80009d6:	f000 fc3c 	bl	8001252 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2011      	movs	r0, #17
 80009e0:	f000 fc1b 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80009e4:	2011      	movs	r0, #17
 80009e6:	f000 fc34 	bl	8001252 <HAL_NVIC_EnableIRQ>

}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0c:	4b27      	ldr	r3, [pc, #156]	@ (8000aac <MX_GPIO_Init+0xb4>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a26      	ldr	r2, [pc, #152]	@ (8000aac <MX_GPIO_Init+0xb4>)
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b24      	ldr	r3, [pc, #144]	@ (8000aac <MX_GPIO_Init+0xb4>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0320 	and.w	r3, r3, #32
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b21      	ldr	r3, [pc, #132]	@ (8000aac <MX_GPIO_Init+0xb4>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a20      	ldr	r2, [pc, #128]	@ (8000aac <MX_GPIO_Init+0xb4>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b1e      	ldr	r3, [pc, #120]	@ (8000aac <MX_GPIO_Init+0xb4>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <MX_GPIO_Init+0xb4>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a1a      	ldr	r2, [pc, #104]	@ (8000aac <MX_GPIO_Init+0xb4>)
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <MX_GPIO_Init+0xb4>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8000a5a:	4815      	ldr	r0, [pc, #84]	@ (8000ab0 <MX_GPIO_Init+0xb8>)
 8000a5c:	f001 f83a 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2178      	movs	r1, #120	@ 0x78
 8000a64:	4813      	ldr	r0, [pc, #76]	@ (8000ab4 <MX_GPIO_Init+0xbc>)
 8000a66:	f001 f835 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10;
 8000a6a:	f44f 63c2 	mov.w	r3, #1552	@ 0x610
 8000a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <MX_GPIO_Init+0xb8>)
 8000a84:	f000 fea2 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a88:	2378      	movs	r3, #120	@ 0x78
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_GPIO_Init+0xbc>)
 8000aa0:	f000 fe94 	bl	80017cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40010c00 	.word	0x40010c00

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <Error_Handler+0x8>

08000ac4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_MspInit+0x5c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	4a14      	ldr	r2, [pc, #80]	@ (8000b20 <HAL_MspInit+0x5c>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6193      	str	r3, [r2, #24]
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_MspInit+0x5c>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <HAL_MspInit+0x5c>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b20 <HAL_MspInit+0x5c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <HAL_MspInit+0x5c>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <HAL_MspInit+0x60>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_MspInit+0x60>)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010000 	.word	0x40010000

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb8 <HAL_I2C_MspInit+0x90>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d132      	bne.n	8000bae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b1c      	ldr	r3, [pc, #112]	@ (8000bbc <HAL_I2C_MspInit+0x94>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bbc <HAL_I2C_MspInit+0x94>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <HAL_I2C_MspInit+0x94>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b66:	2312      	movs	r3, #18
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4812      	ldr	r0, [pc, #72]	@ (8000bc0 <HAL_I2C_MspInit+0x98>)
 8000b76:	f000 fe29 	bl	80017cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000b7a:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <HAL_I2C_MspInit+0x9c>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b82:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b90:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc4 <HAL_I2C_MspInit+0x9c>)
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <HAL_I2C_MspInit+0x94>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_I2C_MspInit+0x94>)
 8000b9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ba0:	61d3      	str	r3, [r2, #28]
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_I2C_MspInit+0x94>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	@ 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010c00 	.word	0x40010c00
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c50 <HAL_SPI_MspInit+0x88>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d12f      	bne.n	8000c48 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <HAL_SPI_MspInit+0x8c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a19      	ldr	r2, [pc, #100]	@ (8000c54 <HAL_SPI_MspInit+0x8c>)
 8000bee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <HAL_SPI_MspInit+0x8c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <HAL_SPI_MspInit+0x8c>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a13      	ldr	r2, [pc, #76]	@ (8000c54 <HAL_SPI_MspInit+0x8c>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_SPI_MspInit+0x8c>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c18:	23a0      	movs	r3, #160	@ 0xa0
 8000c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <HAL_SPI_MspInit+0x90>)
 8000c2c:	f000 fdce 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c30:	2340      	movs	r3, #64	@ 0x40
 8000c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4619      	mov	r1, r3
 8000c42:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <HAL_SPI_MspInit+0x90>)
 8000c44:	f000 fdc2 	bl	80017cc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c48:	bf00      	nop
 8000c4a:	3720      	adds	r7, #32
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40013000 	.word	0x40013000
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010800 	.word	0x40010800

08000c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a09      	ldr	r2, [pc, #36]	@ (8000c90 <HAL_TIM_Base_MspInit+0x34>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10b      	bne.n	8000c86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a08      	ldr	r2, [pc, #32]	@ (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40012c00 	.word	0x40012c00
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a10      	ldr	r2, [pc, #64]	@ (8000cf4 <HAL_TIM_MspPostInit+0x5c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d118      	bne.n	8000cea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <HAL_TIM_MspPostInit+0x60>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <HAL_TIM_MspPostInit+0x60>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <HAL_TIM_MspPostInit+0x60>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <HAL_TIM_MspPostInit+0x64>)
 8000ce6:	f000 fd71 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3720      	adds	r7, #32
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40012c00 	.word	0x40012c00
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010800 	.word	0x40010800

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a46      	ldr	r2, [pc, #280]	@ (8000e34 <HAL_UART_MspInit+0x134>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	f040 8084 	bne.w	8000e2a <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d22:	4b45      	ldr	r3, [pc, #276]	@ (8000e38 <HAL_UART_MspInit+0x138>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4a44      	ldr	r2, [pc, #272]	@ (8000e38 <HAL_UART_MspInit+0x138>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2c:	61d3      	str	r3, [r2, #28]
 8000d2e:	4b42      	ldr	r3, [pc, #264]	@ (8000e38 <HAL_UART_MspInit+0x138>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e38 <HAL_UART_MspInit+0x138>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e38 <HAL_UART_MspInit+0x138>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b3c      	ldr	r3, [pc, #240]	@ (8000e38 <HAL_UART_MspInit+0x138>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d52:	2304      	movs	r3, #4
 8000d54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	4619      	mov	r1, r3
 8000d64:	4835      	ldr	r0, [pc, #212]	@ (8000e3c <HAL_UART_MspInit+0x13c>)
 8000d66:	f000 fd31 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	482f      	ldr	r0, [pc, #188]	@ (8000e3c <HAL_UART_MspInit+0x13c>)
 8000d7e:	f000 fd25 	bl	80017cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000d82:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <HAL_UART_MspInit+0x140>)
 8000d84:	4a2f      	ldr	r2, [pc, #188]	@ (8000e44 <HAL_UART_MspInit+0x144>)
 8000d86:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d88:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <HAL_UART_MspInit+0x140>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e40 <HAL_UART_MspInit+0x140>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d94:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <HAL_UART_MspInit+0x140>)
 8000d96:	2280      	movs	r2, #128	@ 0x80
 8000d98:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d9a:	4b29      	ldr	r3, [pc, #164]	@ (8000e40 <HAL_UART_MspInit+0x140>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000da0:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <HAL_UART_MspInit+0x140>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000da6:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <HAL_UART_MspInit+0x140>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dac:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <HAL_UART_MspInit+0x140>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000db2:	4823      	ldr	r0, [pc, #140]	@ (8000e40 <HAL_UART_MspInit+0x140>)
 8000db4:	f000 fa68 	bl	8001288 <HAL_DMA_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8000dbe:	f7ff fe7b 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8000e40 <HAL_UART_MspInit+0x140>)
 8000dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e40 <HAL_UART_MspInit+0x140>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <HAL_UART_MspInit+0x148>)
 8000dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e4c <HAL_UART_MspInit+0x14c>)
 8000dd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <HAL_UART_MspInit+0x148>)
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <HAL_UART_MspInit+0x148>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000de0:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <HAL_UART_MspInit+0x148>)
 8000de2:	2280      	movs	r2, #128	@ 0x80
 8000de4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_UART_MspInit+0x148>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <HAL_UART_MspInit+0x148>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_UART_MspInit+0x148>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <HAL_UART_MspInit+0x148>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000dfe:	4812      	ldr	r0, [pc, #72]	@ (8000e48 <HAL_UART_MspInit+0x148>)
 8000e00:	f000 fa42 	bl	8001288 <HAL_DMA_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000e0a:	f7ff fe55 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <HAL_UART_MspInit+0x148>)
 8000e12:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e14:	4a0c      	ldr	r2, [pc, #48]	@ (8000e48 <HAL_UART_MspInit+0x148>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2026      	movs	r0, #38	@ 0x26
 8000e20:	f000 f9fb 	bl	800121a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e24:	2026      	movs	r0, #38	@ 0x26
 8000e26:	f000 fa14 	bl	8001252 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3720      	adds	r7, #32
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010800 	.word	0x40010800
 8000e40:	200016e0 	.word	0x200016e0
 8000e44:	4002006c 	.word	0x4002006c
 8000e48:	20001724 	.word	0x20001724
 8000e4c:	40020080 	.word	0x40020080

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <NMI_Handler+0x4>

08000e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <MemManage_Handler+0x4>

08000e68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f8c8 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000eac:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <DMA1_Channel6_IRQHandler+0x10>)
 8000eae:	f000 fb59 	bl	8001564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200016e0 	.word	0x200016e0

08000ebc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ec0:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <DMA1_Channel7_IRQHandler+0x10>)
 8000ec2:	f000 fb4f 	bl	8001564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20001724 	.word	0x20001724

08000ed0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ed4:	4802      	ldr	r0, [pc, #8]	@ (8000ee0 <USART2_IRQHandler+0x10>)
 8000ed6:	f003 f9b1 	bl	800423c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20001698 	.word	0x20001698

08000ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <_sbrk+0x5c>)
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <_sbrk+0x60>)
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <_sbrk+0x64>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <_sbrk+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d207      	bcs.n	8000f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f14:	f004 f976 	bl	8005204 <__errno>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20005000 	.word	0x20005000
 8000f44:	00000400 	.word	0x00000400
 8000f48:	20001770 	.word	0x20001770
 8000f4c:	200018c0 	.word	0x200018c0

08000f50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f5c:	f7ff fff8 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f60:	480b      	ldr	r0, [pc, #44]	@ (8000f90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f62:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f64:	4a0c      	ldr	r2, [pc, #48]	@ (8000f98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a09      	ldr	r2, [pc, #36]	@ (8000f9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f78:	4c09      	ldr	r4, [pc, #36]	@ (8000fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f86:	f004 f943 	bl	8005210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f8a:	f7ff fab3 	bl	80004f4 <main>
  bx lr
 8000f8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f98:	08005358 	.word	0x08005358
  ldr r2, =_sbss
 8000f9c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fa0:	200018c0 	.word	0x200018c0

08000fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC1_2_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <HAL_Init+0x28>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	@ (8000fd0 <HAL_Init+0x28>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f923 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fd7e 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40022000 	.word	0x40022000

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f93b 	bl	800126e <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f903 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <HAL_IncTick+0x1c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <HAL_IncTick+0x20>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <HAL_IncTick+0x20>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20000008 	.word	0x20000008
 8001054:	20001774 	.word	0x20001774

08001058 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b02      	ldr	r3, [pc, #8]	@ (8001068 <HAL_GetTick+0x10>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	20001774 	.word	0x20001774

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4906      	ldr	r1, [pc, #24]	@ (8001104 <__NVIC_EnableIRQ+0x34>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	@ (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff90 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff2d 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff42 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff90 	bl	800115c <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5f 	bl	8001108 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff35 	bl	80010d0 <__NVIC_EnableIRQ>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffa2 	bl	80011c0 <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e043      	b.n	8001326 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <HAL_DMA_Init+0xa8>)
 80012a6:	4413      	add	r3, r2
 80012a8:	4a22      	ldr	r2, [pc, #136]	@ (8001334 <HAL_DMA_Init+0xac>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	009a      	lsls	r2, r3, #2
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001338 <HAL_DMA_Init+0xb0>)
 80012ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80012d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	bffdfff8 	.word	0xbffdfff8
 8001334:	cccccccd 	.word	0xcccccccd
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_DMA_Start_IT+0x20>
 8001358:	2302      	movs	r3, #2
 800135a:	e04b      	b.n	80013f4 <HAL_DMA_Start_IT+0xb8>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d13a      	bne.n	80013e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2202      	movs	r2, #2
 8001374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0201 	bic.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f000 f9eb 	bl	8001770 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d008      	beq.n	80013b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 020e 	orr.w	r2, r2, #14
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e00f      	b.n	80013d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0204 	bic.w	r2, r2, #4
 80013c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 020a 	orr.w	r2, r2, #10
 80013d2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0201 	orr.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e005      	b.n	80013f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80013ee:	2302      	movs	r3, #2
 80013f0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d008      	beq.n	8001426 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2204      	movs	r2, #4
 8001418:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e020      	b.n	8001468 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 020e 	bic.w	r2, r2, #14
 8001434:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0201 	bic.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
	...

08001474 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d005      	beq.n	8001498 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2204      	movs	r2, #4
 8001490:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	e051      	b.n	800153c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 020e 	bic.w	r2, r2, #14
 80014a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0201 	bic.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a22      	ldr	r2, [pc, #136]	@ (8001548 <HAL_DMA_Abort_IT+0xd4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d029      	beq.n	8001516 <HAL_DMA_Abort_IT+0xa2>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a21      	ldr	r2, [pc, #132]	@ (800154c <HAL_DMA_Abort_IT+0xd8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d022      	beq.n	8001512 <HAL_DMA_Abort_IT+0x9e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001550 <HAL_DMA_Abort_IT+0xdc>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d01a      	beq.n	800150c <HAL_DMA_Abort_IT+0x98>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <HAL_DMA_Abort_IT+0xe0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d012      	beq.n	8001506 <HAL_DMA_Abort_IT+0x92>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <HAL_DMA_Abort_IT+0xe4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00a      	beq.n	8001500 <HAL_DMA_Abort_IT+0x8c>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <HAL_DMA_Abort_IT+0xe8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d102      	bne.n	80014fa <HAL_DMA_Abort_IT+0x86>
 80014f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014f8:	e00e      	b.n	8001518 <HAL_DMA_Abort_IT+0xa4>
 80014fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014fe:	e00b      	b.n	8001518 <HAL_DMA_Abort_IT+0xa4>
 8001500:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001504:	e008      	b.n	8001518 <HAL_DMA_Abort_IT+0xa4>
 8001506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150a:	e005      	b.n	8001518 <HAL_DMA_Abort_IT+0xa4>
 800150c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001510:	e002      	b.n	8001518 <HAL_DMA_Abort_IT+0xa4>
 8001512:	2310      	movs	r3, #16
 8001514:	e000      	b.n	8001518 <HAL_DMA_Abort_IT+0xa4>
 8001516:	2301      	movs	r3, #1
 8001518:	4a11      	ldr	r2, [pc, #68]	@ (8001560 <HAL_DMA_Abort_IT+0xec>)
 800151a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
    } 
  }
  return status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40020008 	.word	0x40020008
 800154c:	4002001c 	.word	0x4002001c
 8001550:	40020030 	.word	0x40020030
 8001554:	40020044 	.word	0x40020044
 8001558:	40020058 	.word	0x40020058
 800155c:	4002006c 	.word	0x4002006c
 8001560:	40020000 	.word	0x40020000

08001564 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	2204      	movs	r2, #4
 8001582:	409a      	lsls	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4013      	ands	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d04f      	beq.n	800162c <HAL_DMA_IRQHandler+0xc8>
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b00      	cmp	r3, #0
 8001594:	d04a      	beq.n	800162c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d107      	bne.n	80015b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0204 	bic.w	r2, r2, #4
 80015b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a66      	ldr	r2, [pc, #408]	@ (8001754 <HAL_DMA_IRQHandler+0x1f0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d029      	beq.n	8001612 <HAL_DMA_IRQHandler+0xae>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a65      	ldr	r2, [pc, #404]	@ (8001758 <HAL_DMA_IRQHandler+0x1f4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d022      	beq.n	800160e <HAL_DMA_IRQHandler+0xaa>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a63      	ldr	r2, [pc, #396]	@ (800175c <HAL_DMA_IRQHandler+0x1f8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01a      	beq.n	8001608 <HAL_DMA_IRQHandler+0xa4>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a62      	ldr	r2, [pc, #392]	@ (8001760 <HAL_DMA_IRQHandler+0x1fc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d012      	beq.n	8001602 <HAL_DMA_IRQHandler+0x9e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a60      	ldr	r2, [pc, #384]	@ (8001764 <HAL_DMA_IRQHandler+0x200>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00a      	beq.n	80015fc <HAL_DMA_IRQHandler+0x98>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001768 <HAL_DMA_IRQHandler+0x204>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d102      	bne.n	80015f6 <HAL_DMA_IRQHandler+0x92>
 80015f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015f4:	e00e      	b.n	8001614 <HAL_DMA_IRQHandler+0xb0>
 80015f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80015fa:	e00b      	b.n	8001614 <HAL_DMA_IRQHandler+0xb0>
 80015fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001600:	e008      	b.n	8001614 <HAL_DMA_IRQHandler+0xb0>
 8001602:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001606:	e005      	b.n	8001614 <HAL_DMA_IRQHandler+0xb0>
 8001608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800160c:	e002      	b.n	8001614 <HAL_DMA_IRQHandler+0xb0>
 800160e:	2340      	movs	r3, #64	@ 0x40
 8001610:	e000      	b.n	8001614 <HAL_DMA_IRQHandler+0xb0>
 8001612:	2304      	movs	r3, #4
 8001614:	4a55      	ldr	r2, [pc, #340]	@ (800176c <HAL_DMA_IRQHandler+0x208>)
 8001616:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 8094 	beq.w	800174a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800162a:	e08e      	b.n	800174a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	2202      	movs	r2, #2
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d056      	beq.n	80016ea <HAL_DMA_IRQHandler+0x186>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d051      	beq.n	80016ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10b      	bne.n	800166c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 020a 	bic.w	r2, r2, #10
 8001662:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a38      	ldr	r2, [pc, #224]	@ (8001754 <HAL_DMA_IRQHandler+0x1f0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d029      	beq.n	80016ca <HAL_DMA_IRQHandler+0x166>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a37      	ldr	r2, [pc, #220]	@ (8001758 <HAL_DMA_IRQHandler+0x1f4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x162>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a35      	ldr	r2, [pc, #212]	@ (800175c <HAL_DMA_IRQHandler+0x1f8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01a      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x15c>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a34      	ldr	r2, [pc, #208]	@ (8001760 <HAL_DMA_IRQHandler+0x1fc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d012      	beq.n	80016ba <HAL_DMA_IRQHandler+0x156>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a32      	ldr	r2, [pc, #200]	@ (8001764 <HAL_DMA_IRQHandler+0x200>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00a      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x150>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a31      	ldr	r2, [pc, #196]	@ (8001768 <HAL_DMA_IRQHandler+0x204>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d102      	bne.n	80016ae <HAL_DMA_IRQHandler+0x14a>
 80016a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80016ac:	e00e      	b.n	80016cc <HAL_DMA_IRQHandler+0x168>
 80016ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016b2:	e00b      	b.n	80016cc <HAL_DMA_IRQHandler+0x168>
 80016b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016b8:	e008      	b.n	80016cc <HAL_DMA_IRQHandler+0x168>
 80016ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016be:	e005      	b.n	80016cc <HAL_DMA_IRQHandler+0x168>
 80016c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016c4:	e002      	b.n	80016cc <HAL_DMA_IRQHandler+0x168>
 80016c6:	2320      	movs	r3, #32
 80016c8:	e000      	b.n	80016cc <HAL_DMA_IRQHandler+0x168>
 80016ca:	2302      	movs	r3, #2
 80016cc:	4a27      	ldr	r2, [pc, #156]	@ (800176c <HAL_DMA_IRQHandler+0x208>)
 80016ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d034      	beq.n	800174a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016e8:	e02f      	b.n	800174a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	2208      	movs	r2, #8
 80016f0:	409a      	lsls	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d028      	beq.n	800174c <HAL_DMA_IRQHandler+0x1e8>
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d023      	beq.n	800174c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 020e 	bic.w	r2, r2, #14
 8001712:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
    }
  }
  return;
 800174a:	bf00      	nop
 800174c:	bf00      	nop
}
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40020008 	.word	0x40020008
 8001758:	4002001c 	.word	0x4002001c
 800175c:	40020030 	.word	0x40020030
 8001760:	40020044 	.word	0x40020044
 8001764:	40020058 	.word	0x40020058
 8001768:	4002006c 	.word	0x4002006c
 800176c:	40020000 	.word	0x40020000

08001770 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001786:	2101      	movs	r1, #1
 8001788:	fa01 f202 	lsl.w	r2, r1, r2
 800178c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b10      	cmp	r3, #16
 800179c:	d108      	bne.n	80017b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017ae:	e007      	b.n	80017c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b08b      	sub	sp, #44	@ 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	e169      	b.n	8001ab4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017e0:	2201      	movs	r2, #1
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	f040 8158 	bne.w	8001aae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4a9a      	ldr	r2, [pc, #616]	@ (8001a6c <HAL_GPIO_Init+0x2a0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d05e      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001808:	4a98      	ldr	r2, [pc, #608]	@ (8001a6c <HAL_GPIO_Init+0x2a0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d875      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 800180e:	4a98      	ldr	r2, [pc, #608]	@ (8001a70 <HAL_GPIO_Init+0x2a4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d058      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001814:	4a96      	ldr	r2, [pc, #600]	@ (8001a70 <HAL_GPIO_Init+0x2a4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d86f      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 800181a:	4a96      	ldr	r2, [pc, #600]	@ (8001a74 <HAL_GPIO_Init+0x2a8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d052      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001820:	4a94      	ldr	r2, [pc, #592]	@ (8001a74 <HAL_GPIO_Init+0x2a8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d869      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 8001826:	4a94      	ldr	r2, [pc, #592]	@ (8001a78 <HAL_GPIO_Init+0x2ac>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d04c      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 800182c:	4a92      	ldr	r2, [pc, #584]	@ (8001a78 <HAL_GPIO_Init+0x2ac>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d863      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 8001832:	4a92      	ldr	r2, [pc, #584]	@ (8001a7c <HAL_GPIO_Init+0x2b0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d046      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001838:	4a90      	ldr	r2, [pc, #576]	@ (8001a7c <HAL_GPIO_Init+0x2b0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d85d      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 800183e:	2b12      	cmp	r3, #18
 8001840:	d82a      	bhi.n	8001898 <HAL_GPIO_Init+0xcc>
 8001842:	2b12      	cmp	r3, #18
 8001844:	d859      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 8001846:	a201      	add	r2, pc, #4	@ (adr r2, 800184c <HAL_GPIO_Init+0x80>)
 8001848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184c:	080018c7 	.word	0x080018c7
 8001850:	080018a1 	.word	0x080018a1
 8001854:	080018b3 	.word	0x080018b3
 8001858:	080018f5 	.word	0x080018f5
 800185c:	080018fb 	.word	0x080018fb
 8001860:	080018fb 	.word	0x080018fb
 8001864:	080018fb 	.word	0x080018fb
 8001868:	080018fb 	.word	0x080018fb
 800186c:	080018fb 	.word	0x080018fb
 8001870:	080018fb 	.word	0x080018fb
 8001874:	080018fb 	.word	0x080018fb
 8001878:	080018fb 	.word	0x080018fb
 800187c:	080018fb 	.word	0x080018fb
 8001880:	080018fb 	.word	0x080018fb
 8001884:	080018fb 	.word	0x080018fb
 8001888:	080018fb 	.word	0x080018fb
 800188c:	080018fb 	.word	0x080018fb
 8001890:	080018a9 	.word	0x080018a9
 8001894:	080018bd 	.word	0x080018bd
 8001898:	4a79      	ldr	r2, [pc, #484]	@ (8001a80 <HAL_GPIO_Init+0x2b4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800189e:	e02c      	b.n	80018fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e029      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	3304      	adds	r3, #4
 80018ae:	623b      	str	r3, [r7, #32]
          break;
 80018b0:	e024      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	3308      	adds	r3, #8
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e01f      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	330c      	adds	r3, #12
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e01a      	b.n	80018fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ce:	2304      	movs	r3, #4
 80018d0:	623b      	str	r3, [r7, #32]
          break;
 80018d2:	e013      	b.n	80018fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018dc:	2308      	movs	r3, #8
 80018de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	611a      	str	r2, [r3, #16]
          break;
 80018e6:	e009      	b.n	80018fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e8:	2308      	movs	r3, #8
 80018ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	615a      	str	r2, [r3, #20]
          break;
 80018f2:	e003      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e000      	b.n	80018fc <HAL_GPIO_Init+0x130>
          break;
 80018fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2bff      	cmp	r3, #255	@ 0xff
 8001900:	d801      	bhi.n	8001906 <HAL_GPIO_Init+0x13a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	e001      	b.n	800190a <HAL_GPIO_Init+0x13e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3304      	adds	r3, #4
 800190a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2bff      	cmp	r3, #255	@ 0xff
 8001910:	d802      	bhi.n	8001918 <HAL_GPIO_Init+0x14c>
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	e002      	b.n	800191e <HAL_GPIO_Init+0x152>
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	3b08      	subs	r3, #8
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	210f      	movs	r1, #15
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	401a      	ands	r2, r3
 8001930:	6a39      	ldr	r1, [r7, #32]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	431a      	orrs	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80b1 	beq.w	8001aae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800194c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a84 <HAL_GPIO_Init+0x2b8>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a4c      	ldr	r2, [pc, #304]	@ (8001a84 <HAL_GPIO_Init+0x2b8>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b4a      	ldr	r3, [pc, #296]	@ (8001a84 <HAL_GPIO_Init+0x2b8>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001964:	4a48      	ldr	r2, [pc, #288]	@ (8001a88 <HAL_GPIO_Init+0x2bc>)
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a40      	ldr	r2, [pc, #256]	@ (8001a8c <HAL_GPIO_Init+0x2c0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d013      	beq.n	80019b8 <HAL_GPIO_Init+0x1ec>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3f      	ldr	r2, [pc, #252]	@ (8001a90 <HAL_GPIO_Init+0x2c4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d00d      	beq.n	80019b4 <HAL_GPIO_Init+0x1e8>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a94 <HAL_GPIO_Init+0x2c8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d007      	beq.n	80019b0 <HAL_GPIO_Init+0x1e4>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001a98 <HAL_GPIO_Init+0x2cc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d101      	bne.n	80019ac <HAL_GPIO_Init+0x1e0>
 80019a8:	2303      	movs	r3, #3
 80019aa:	e006      	b.n	80019ba <HAL_GPIO_Init+0x1ee>
 80019ac:	2304      	movs	r3, #4
 80019ae:	e004      	b.n	80019ba <HAL_GPIO_Init+0x1ee>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x1ee>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_GPIO_Init+0x1ee>
 80019b8:	2300      	movs	r3, #0
 80019ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019bc:	f002 0203 	and.w	r2, r2, #3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4093      	lsls	r3, r2
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ca:	492f      	ldr	r1, [pc, #188]	@ (8001a88 <HAL_GPIO_Init+0x2bc>)
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019e4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	492c      	ldr	r1, [pc, #176]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019f2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4928      	ldr	r1, [pc, #160]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a0c:	4b23      	ldr	r3, [pc, #140]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	4922      	ldr	r1, [pc, #136]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60cb      	str	r3, [r1, #12]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a1a:	4b20      	ldr	r3, [pc, #128]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	491e      	ldr	r1, [pc, #120]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a34:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4918      	ldr	r1, [pc, #96]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a42:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	4914      	ldr	r1, [pc, #80]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d021      	beq.n	8001aa0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	490e      	ldr	r1, [pc, #56]	@ (8001a9c <HAL_GPIO_Init+0x2d0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e021      	b.n	8001aae <HAL_GPIO_Init+0x2e2>
 8001a6a:	bf00      	nop
 8001a6c:	10320000 	.word	0x10320000
 8001a70:	10310000 	.word	0x10310000
 8001a74:	10220000 	.word	0x10220000
 8001a78:	10210000 	.word	0x10210000
 8001a7c:	10120000 	.word	0x10120000
 8001a80:	10110000 	.word	0x10110000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	40010c00 	.word	0x40010c00
 8001a94:	40011000 	.word	0x40011000
 8001a98:	40011400 	.word	0x40011400
 8001a9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	4909      	ldr	r1, [pc, #36]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f47f ae8e 	bne.w	80017e0 <HAL_GPIO_Init+0x14>
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	372c      	adds	r7, #44	@ 0x2c
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae4:	787b      	ldrb	r3, [r7, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001af0:	e003      	b.n	8001afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	041a      	lsls	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43d9      	mvns	r1, r3
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	400b      	ands	r3, r1
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	611a      	str	r2, [r3, #16]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e12b      	b.n	8001da2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7fe ffe2 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	@ 0x24
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b9c:	f001 fbfc 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a81      	ldr	r2, [pc, #516]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d807      	bhi.n	8001bbc <HAL_I2C_Init+0x84>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a80      	ldr	r2, [pc, #512]	@ (8001db0 <HAL_I2C_Init+0x278>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	bf94      	ite	ls
 8001bb4:	2301      	movls	r3, #1
 8001bb6:	2300      	movhi	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e006      	b.n	8001bca <HAL_I2C_Init+0x92>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a7d      	ldr	r2, [pc, #500]	@ (8001db4 <HAL_I2C_Init+0x27c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0e7      	b.n	8001da2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4a78      	ldr	r2, [pc, #480]	@ (8001db8 <HAL_I2C_Init+0x280>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9b      	lsrs	r3, r3, #18
 8001bdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a6a      	ldr	r2, [pc, #424]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d802      	bhi.n	8001c0c <HAL_I2C_Init+0xd4>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	e009      	b.n	8001c20 <HAL_I2C_Init+0xe8>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4a69      	ldr	r2, [pc, #420]	@ (8001dbc <HAL_I2C_Init+0x284>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	3301      	adds	r3, #1
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	495c      	ldr	r1, [pc, #368]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	d819      	bhi.n	8001c74 <HAL_I2C_Init+0x13c>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e59      	subs	r1, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4e:	1c59      	adds	r1, r3, #1
 8001c50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c54:	400b      	ands	r3, r1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00a      	beq.n	8001c70 <HAL_I2C_Init+0x138>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1e59      	subs	r1, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6e:	e051      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001c70:	2304      	movs	r3, #4
 8001c72:	e04f      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d111      	bne.n	8001ca0 <HAL_I2C_Init+0x168>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	440b      	add	r3, r1
 8001c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	e012      	b.n	8001cc6 <HAL_I2C_Init+0x18e>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1e58      	subs	r0, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	0099      	lsls	r1, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Init+0x196>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e022      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_I2C_Init+0x1bc>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1e58      	subs	r0, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6859      	ldr	r1, [r3, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	440b      	add	r3, r1
 8001ce4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cf2:	e00f      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1e58      	subs	r0, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	0099      	lsls	r1, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	6809      	ldr	r1, [r1, #0]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6911      	ldr	r1, [r2, #16]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68d2      	ldr	r2, [r2, #12]
 8001d4e:	4311      	orrs	r1, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	000186a0 	.word	0x000186a0
 8001db0:	001e847f 	.word	0x001e847f
 8001db4:	003d08ff 	.word	0x003d08ff
 8001db8:	431bde83 	.word	0x431bde83
 8001dbc:	10624dd3 	.word	0x10624dd3

08001dc0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	4608      	mov	r0, r1
 8001dca:	4611      	mov	r1, r2
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	817b      	strh	r3, [r7, #10]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	813b      	strh	r3, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dda:	f7ff f93d 	bl	8001058 <HAL_GetTick>
 8001dde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	f040 80d9 	bne.w	8001fa0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2319      	movs	r3, #25
 8001df4:	2201      	movs	r2, #1
 8001df6:	496d      	ldr	r1, [pc, #436]	@ (8001fac <HAL_I2C_Mem_Write+0x1ec>)
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 fccd 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e04:	2302      	movs	r3, #2
 8001e06:	e0cc      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_I2C_Mem_Write+0x56>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e0c5      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d007      	beq.n	8001e3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2221      	movs	r2, #33	@ 0x21
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2240      	movs	r2, #64	@ 0x40
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a3a      	ldr	r2, [r7, #32]
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb0 <HAL_I2C_Mem_Write+0x1f0>)
 8001e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e7e:	88f8      	ldrh	r0, [r7, #6]
 8001e80:	893a      	ldrh	r2, [r7, #8]
 8001e82:	8979      	ldrh	r1, [r7, #10]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fb04 	bl	800249c <I2C_RequestMemoryWrite>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d052      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e081      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fd92 	bl	80029cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d107      	bne.n	8001ec6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ec4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e06b      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d11b      	bne.n	8001f40 <HAL_I2C_Mem_Write+0x180>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d017      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1aa      	bne.n	8001e9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fd85 	bl	8002a5c <I2C_WaitOnBTFFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d107      	bne.n	8001f70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e016      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	00100002 	.word	0x00100002
 8001fb0:	ffff0000 	.word	0xffff0000

08001fb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	@ 0x30
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	817b      	strh	r3, [r7, #10]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	813b      	strh	r3, [r7, #8]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fd2:	f7ff f841 	bl	8001058 <HAL_GetTick>
 8001fd6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	f040 8250 	bne.w	8002486 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2319      	movs	r3, #25
 8001fec:	2201      	movs	r2, #1
 8001fee:	4982      	ldr	r1, [pc, #520]	@ (80021f8 <HAL_I2C_Mem_Read+0x244>)
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 fbd1 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e243      	b.n	8002488 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_I2C_Mem_Read+0x5a>
 800200a:	2302      	movs	r3, #2
 800200c:	e23c      	b.n	8002488 <HAL_I2C_Mem_Read+0x4d4>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d007      	beq.n	8002034 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002042:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2222      	movs	r2, #34	@ 0x22
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2240      	movs	r2, #64	@ 0x40
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002064:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a62      	ldr	r2, [pc, #392]	@ (80021fc <HAL_I2C_Mem_Read+0x248>)
 8002074:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002076:	88f8      	ldrh	r0, [r7, #6]
 8002078:	893a      	ldrh	r2, [r7, #8]
 800207a:	8979      	ldrh	r1, [r7, #10]
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	4603      	mov	r3, r0
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fa9e 	bl	80025c8 <I2C_RequestMemoryRead>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e1f8      	b.n	8002488 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209a:	2b00      	cmp	r3, #0
 800209c:	d113      	bne.n	80020c6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e1cc      	b.n	8002460 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d11e      	bne.n	800210c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020de:	b672      	cpsid	i
}
 80020e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002106:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002108:	b662      	cpsie	i
}
 800210a:	e035      	b.n	8002178 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002110:	2b02      	cmp	r3, #2
 8002112:	d11e      	bne.n	8002152 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002122:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002124:	b672      	cpsid	i
}
 8002126:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800214c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800214e:	b662      	cpsie	i
}
 8002150:	e012      	b.n	8002178 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002160:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002178:	e172      	b.n	8002460 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800217e:	2b03      	cmp	r3, #3
 8002180:	f200 811f 	bhi.w	80023c2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002188:	2b01      	cmp	r3, #1
 800218a:	d123      	bne.n	80021d4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800218e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fcab 	bl	8002aec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e173      	b.n	8002488 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021d2:	e145      	b.n	8002460 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d152      	bne.n	8002282 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e2:	2200      	movs	r2, #0
 80021e4:	4906      	ldr	r1, [pc, #24]	@ (8002200 <HAL_I2C_Mem_Read+0x24c>)
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fad6 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e148      	b.n	8002488 <HAL_I2C_Mem_Read+0x4d4>
 80021f6:	bf00      	nop
 80021f8:	00100002 	.word	0x00100002
 80021fc:	ffff0000 	.word	0xffff0000
 8002200:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002204:	b672      	cpsid	i
}
 8002206:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800224a:	b662      	cpsie	i
}
 800224c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002280:	e0ee      	b.n	8002460 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002288:	2200      	movs	r2, #0
 800228a:	4981      	ldr	r1, [pc, #516]	@ (8002490 <HAL_I2C_Mem_Read+0x4dc>)
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 fa83 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0f5      	b.n	8002488 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
}
 80022ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002494 <HAL_I2C_Mem_Read+0x4e0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	08db      	lsrs	r3, r3, #3
 80022e8:	4a6b      	ldr	r2, [pc, #428]	@ (8002498 <HAL_I2C_Mem_Read+0x4e4>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0a1a      	lsrs	r2, r3, #8
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00da      	lsls	r2, r3, #3
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	3b01      	subs	r3, #1
 8002300:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d118      	bne.n	800233a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800232a:	b662      	cpsie	i
}
 800232c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0a6      	b.n	8002488 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b04      	cmp	r3, #4
 8002346:	d1d9      	bne.n	80022fc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800238a:	b662      	cpsie	i
}
 800238c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023c0:	e04e      	b.n	8002460 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fb90 	bl	8002aec <I2C_WaitOnRXNEFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e058      	b.n	8002488 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b04      	cmp	r3, #4
 8002414:	d124      	bne.n	8002460 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241a:	2b03      	cmp	r3, #3
 800241c:	d107      	bne.n	800242e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800242c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	f47f ae88 	bne.w	800217a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002486:	2302      	movs	r3, #2
  }
}
 8002488:	4618      	mov	r0, r3
 800248a:	3728      	adds	r7, #40	@ 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	00010004 	.word	0x00010004
 8002494:	20000000 	.word	0x20000000
 8002498:	14f8b589 	.word	0x14f8b589

0800249c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	4608      	mov	r0, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	817b      	strh	r3, [r7, #10]
 80024ae:	460b      	mov	r3, r1
 80024b0:	813b      	strh	r3, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f960 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ec:	d103      	bne.n	80024f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e05f      	b.n	80025ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024fa:	897b      	ldrh	r3, [r7, #10]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002508:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	6a3a      	ldr	r2, [r7, #32]
 800250e:	492d      	ldr	r1, [pc, #180]	@ (80025c4 <I2C_RequestMemoryWrite+0x128>)
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f9bb 	bl	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e04c      	b.n	80025ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002538:	6a39      	ldr	r1, [r7, #32]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fa46 	bl	80029cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	2b04      	cmp	r3, #4
 800254c:	d107      	bne.n	800255e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e02b      	b.n	80025ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002568:	893b      	ldrh	r3, [r7, #8]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	611a      	str	r2, [r3, #16]
 8002572:	e021      	b.n	80025b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002574:	893b      	ldrh	r3, [r7, #8]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	b29b      	uxth	r3, r3
 800257a:	b2da      	uxtb	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002584:	6a39      	ldr	r1, [r7, #32]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fa20 	bl	80029cc <I2C_WaitOnTXEFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	2b04      	cmp	r3, #4
 8002598:	d107      	bne.n	80025aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e005      	b.n	80025ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025ae:	893b      	ldrh	r3, [r7, #8]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	00010002 	.word	0x00010002

080025c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	817b      	strh	r3, [r7, #10]
 80025da:	460b      	mov	r3, r1
 80025dc:	813b      	strh	r3, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002600:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	2200      	movs	r2, #0
 800260a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f8c2 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002628:	d103      	bne.n	8002632 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002630:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0aa      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002644:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	6a3a      	ldr	r2, [r7, #32]
 800264a:	4952      	ldr	r1, [pc, #328]	@ (8002794 <I2C_RequestMemoryRead+0x1cc>)
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f91d 	bl	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e097      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002674:	6a39      	ldr	r1, [r7, #32]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f9a8 	bl	80029cc <I2C_WaitOnTXEFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	2b04      	cmp	r3, #4
 8002688:	d107      	bne.n	800269a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002698:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e076      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026a4:	893b      	ldrh	r3, [r7, #8]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	611a      	str	r2, [r3, #16]
 80026ae:	e021      	b.n	80026f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026b0:	893b      	ldrh	r3, [r7, #8]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c0:	6a39      	ldr	r1, [r7, #32]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f982 	bl	80029cc <I2C_WaitOnTXEFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d107      	bne.n	80026e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e050      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026ea:	893b      	ldrh	r3, [r7, #8]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f6:	6a39      	ldr	r1, [r7, #32]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f967 	bl	80029cc <I2C_WaitOnTXEFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00d      	beq.n	8002720 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	2b04      	cmp	r3, #4
 800270a:	d107      	bne.n	800271c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800271a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e035      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800272e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	2200      	movs	r2, #0
 8002738:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f82b 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002756:	d103      	bne.n	8002760 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e013      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002764:	897b      	ldrh	r3, [r7, #10]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	6a3a      	ldr	r2, [r7, #32]
 8002778:	4906      	ldr	r1, [pc, #24]	@ (8002794 <I2C_RequestMemoryRead+0x1cc>)
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f886 	bl	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	00010002 	.word	0x00010002

08002798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a8:	e048      	b.n	800283c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d044      	beq.n	800283c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b2:	f7fe fc51 	bl	8001058 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d139      	bne.n	800283c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	0c1b      	lsrs	r3, r3, #16
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10d      	bne.n	80027ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	43da      	mvns	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4013      	ands	r3, r2
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	e00c      	b.n	8002808 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	43da      	mvns	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4013      	ands	r3, r2
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	429a      	cmp	r2, r3
 800280c:	d116      	bne.n	800283c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e023      	b.n	8002884 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	0c1b      	lsrs	r3, r3, #16
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d10d      	bne.n	8002862 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	43da      	mvns	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4013      	ands	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	e00c      	b.n	800287c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	43da      	mvns	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4013      	ands	r3, r2
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	429a      	cmp	r2, r3
 8002880:	d093      	beq.n	80027aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800289a:	e071      	b.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028aa:	d123      	bne.n	80028f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	f043 0204 	orr.w	r2, r3, #4
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e067      	b.n	80029c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fa:	d041      	beq.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fc:	f7fe fbac 	bl	8001058 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	d302      	bcc.n	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d136      	bne.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10c      	bne.n	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4013      	ands	r3, r2
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf14      	ite	ne
 800292e:	2301      	movne	r3, #1
 8002930:	2300      	moveq	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	e00b      	b.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	43da      	mvns	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4013      	ands	r3, r2
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e021      	b.n	80029c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	0c1b      	lsrs	r3, r3, #16
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d10c      	bne.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	43da      	mvns	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e00b      	b.n	80029bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4013      	ands	r3, r2
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f47f af6d 	bne.w	800289c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029d8:	e034      	b.n	8002a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f8e3 	bl	8002ba6 <I2C_IsAcknowledgeFailed>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e034      	b.n	8002a54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d028      	beq.n	8002a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f2:	f7fe fb31 	bl	8001058 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d302      	bcc.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d11d      	bne.n	8002a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a12:	2b80      	cmp	r3, #128	@ 0x80
 8002a14:	d016      	beq.n	8002a44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e007      	b.n	8002a54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4e:	2b80      	cmp	r3, #128	@ 0x80
 8002a50:	d1c3      	bne.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a68:	e034      	b.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f89b 	bl	8002ba6 <I2C_IsAcknowledgeFailed>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e034      	b.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d028      	beq.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7fe fae9 	bl	8001058 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11d      	bne.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d016      	beq.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e007      	b.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d1c3      	bne.n	8002a6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002af8:	e049      	b.n	8002b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d119      	bne.n	8002b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0210 	mvn.w	r2, #16
 8002b10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e030      	b.n	8002b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3c:	f7fe fa8c 	bl	8001058 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d302      	bcc.n	8002b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d11d      	bne.n	8002b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d016      	beq.n	8002b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e007      	b.n	8002b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b98:	2b40      	cmp	r3, #64	@ 0x40
 8002b9a:	d1ae      	bne.n	8002afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bbc:	d11b      	bne.n	8002bf6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bc6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e272      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8087 	beq.w	8002d32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c24:	4b92      	ldr	r3, [pc, #584]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d00c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c30:	4b8f      	ldr	r3, [pc, #572]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d112      	bne.n	8002c62 <HAL_RCC_OscConfig+0x5e>
 8002c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c48:	d10b      	bne.n	8002c62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4a:	4b89      	ldr	r3, [pc, #548]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d06c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x12c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d168      	bne.n	8002d30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e24c      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x76>
 8002c6c:	4b80      	ldr	r3, [pc, #512]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a7f      	ldr	r2, [pc, #508]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	e02e      	b.n	8002cd8 <HAL_RCC_OscConfig+0xd4>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x98>
 8002c82:	4b7b      	ldr	r3, [pc, #492]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7a      	ldr	r2, [pc, #488]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b78      	ldr	r3, [pc, #480]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a77      	ldr	r2, [pc, #476]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e01d      	b.n	8002cd8 <HAL_RCC_OscConfig+0xd4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0xbc>
 8002ca6:	4b72      	ldr	r3, [pc, #456]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a71      	ldr	r2, [pc, #452]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b6f      	ldr	r3, [pc, #444]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a6e      	ldr	r2, [pc, #440]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCC_OscConfig+0xd4>
 8002cc0:	4b6b      	ldr	r3, [pc, #428]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b68      	ldr	r3, [pc, #416]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a67      	ldr	r2, [pc, #412]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe f9ba 	bl	8001058 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe f9b6 	bl	8001058 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	@ 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e200      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xe4>
 8002d06:	e014      	b.n	8002d32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fe f9a6 	bl	8001058 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d10:	f7fe f9a2 	bl	8001058 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	@ 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e1ec      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	4b53      	ldr	r3, [pc, #332]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x10c>
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d063      	beq.n	8002e06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d4a:	4b49      	ldr	r3, [pc, #292]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d11c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x18c>
 8002d56:	4b46      	ldr	r3, [pc, #280]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d116      	bne.n	8002d90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d62:	4b43      	ldr	r3, [pc, #268]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_RCC_OscConfig+0x176>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d001      	beq.n	8002d7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e1c0      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4939      	ldr	r1, [pc, #228]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	e03a      	b.n	8002e06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d98:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fe f95b 	bl	8001058 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da6:	f7fe f957 	bl	8001058 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e1a1      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	4b2d      	ldr	r3, [pc, #180]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4927      	ldr	r1, [pc, #156]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dda:	4b26      	ldr	r3, [pc, #152]	@ (8002e74 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe f93a 	bl	8001058 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de8:	f7fe f936 	bl	8001058 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e180      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d03a      	beq.n	8002e88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d019      	beq.n	8002e4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1a:	4b17      	ldr	r3, [pc, #92]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e20:	f7fe f91a 	bl	8001058 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e28:	f7fe f916 	bl	8001058 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e160      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e46:	2001      	movs	r0, #1
 8002e48:	f000 face 	bl	80033e8 <RCC_Delay>
 8002e4c:	e01c      	b.n	8002e88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <HAL_RCC_OscConfig+0x274>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e54:	f7fe f900 	bl	8001058 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5a:	e00f      	b.n	8002e7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7fe f8fc 	bl	8001058 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d908      	bls.n	8002e7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e146      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	42420000 	.word	0x42420000
 8002e78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e7c:	4b92      	ldr	r3, [pc, #584]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e9      	bne.n	8002e5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80a6 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e96:	2300      	movs	r3, #0
 8002e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9a:	4b8b      	ldr	r3, [pc, #556]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10d      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	4b88      	ldr	r3, [pc, #544]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	4a87      	ldr	r2, [pc, #540]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb0:	61d3      	str	r3, [r2, #28]
 8002eb2:	4b85      	ldr	r3, [pc, #532]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b82      	ldr	r3, [pc, #520]	@ (80030cc <HAL_RCC_OscConfig+0x4c8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d118      	bne.n	8002f00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ece:	4b7f      	ldr	r3, [pc, #508]	@ (80030cc <HAL_RCC_OscConfig+0x4c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a7e      	ldr	r2, [pc, #504]	@ (80030cc <HAL_RCC_OscConfig+0x4c8>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eda:	f7fe f8bd 	bl	8001058 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee2:	f7fe f8b9 	bl	8001058 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b64      	cmp	r3, #100	@ 0x64
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e103      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	4b75      	ldr	r3, [pc, #468]	@ (80030cc <HAL_RCC_OscConfig+0x4c8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x312>
 8002f08:	4b6f      	ldr	r3, [pc, #444]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a6e      	ldr	r2, [pc, #440]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6213      	str	r3, [r2, #32]
 8002f14:	e02d      	b.n	8002f72 <HAL_RCC_OscConfig+0x36e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x334>
 8002f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4a69      	ldr	r2, [pc, #420]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6213      	str	r3, [r2, #32]
 8002f2a:	4b67      	ldr	r3, [pc, #412]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4a66      	ldr	r2, [pc, #408]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	f023 0304 	bic.w	r3, r3, #4
 8002f34:	6213      	str	r3, [r2, #32]
 8002f36:	e01c      	b.n	8002f72 <HAL_RCC_OscConfig+0x36e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d10c      	bne.n	8002f5a <HAL_RCC_OscConfig+0x356>
 8002f40:	4b61      	ldr	r3, [pc, #388]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4a60      	ldr	r2, [pc, #384]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	6213      	str	r3, [r2, #32]
 8002f4c:	4b5e      	ldr	r3, [pc, #376]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4a5d      	ldr	r2, [pc, #372]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6213      	str	r3, [r2, #32]
 8002f58:	e00b      	b.n	8002f72 <HAL_RCC_OscConfig+0x36e>
 8002f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4a5a      	ldr	r2, [pc, #360]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	6213      	str	r3, [r2, #32]
 8002f66:	4b58      	ldr	r3, [pc, #352]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4a57      	ldr	r2, [pc, #348]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d015      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7a:	f7fe f86d 	bl	8001058 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fe f869 	bl	8001058 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0b1      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	4b4b      	ldr	r3, [pc, #300]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ee      	beq.n	8002f82 <HAL_RCC_OscConfig+0x37e>
 8002fa4:	e014      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa6:	f7fe f857 	bl	8001058 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe f853 	bl	8001058 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e09b      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc4:	4b40      	ldr	r3, [pc, #256]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ee      	bne.n	8002fae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d105      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd6:	4b3c      	ldr	r3, [pc, #240]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4a3b      	ldr	r2, [pc, #236]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fe0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8087 	beq.w	80030fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fec:	4b36      	ldr	r3, [pc, #216]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d061      	beq.n	80030bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d146      	bne.n	800308e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003000:	4b33      	ldr	r3, [pc, #204]	@ (80030d0 <HAL_RCC_OscConfig+0x4cc>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7fe f827 	bl	8001058 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300e:	f7fe f823 	bl	8001058 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e06d      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003020:	4b29      	ldr	r3, [pc, #164]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003034:	d108      	bne.n	8003048 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003036:	4b24      	ldr	r3, [pc, #144]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4921      	ldr	r1, [pc, #132]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003048:	4b1f      	ldr	r3, [pc, #124]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a19      	ldr	r1, [r3, #32]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	430b      	orrs	r3, r1
 800305a:	491b      	ldr	r1, [pc, #108]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003060:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <HAL_RCC_OscConfig+0x4cc>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fd fff7 	bl	8001058 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306e:	f7fd fff3 	bl	8001058 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e03d      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003080:	4b11      	ldr	r3, [pc, #68]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x46a>
 800308c:	e035      	b.n	80030fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308e:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <HAL_RCC_OscConfig+0x4cc>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fd ffe0 	bl	8001058 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309c:	f7fd ffdc 	bl	8001058 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e026      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ae:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x498>
 80030ba:	e01e      	b.n	80030fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e019      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
 80030d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_RCC_OscConfig+0x500>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d001      	beq.n	80030fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000

08003108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0d0      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b6a      	ldr	r3, [pc, #424]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d910      	bls.n	800314c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b67      	ldr	r3, [pc, #412]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 0207 	bic.w	r2, r3, #7
 8003132:	4965      	ldr	r1, [pc, #404]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b63      	ldr	r3, [pc, #396]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0b8      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003164:	4b59      	ldr	r3, [pc, #356]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a58      	ldr	r2, [pc, #352]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800316e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800317c:	4b53      	ldr	r3, [pc, #332]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4a52      	ldr	r2, [pc, #328]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003188:	4b50      	ldr	r3, [pc, #320]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	494d      	ldr	r1, [pc, #308]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d040      	beq.n	8003228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b47      	ldr	r3, [pc, #284]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d115      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e07f      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b41      	ldr	r3, [pc, #260]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e073      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	4b3d      	ldr	r3, [pc, #244]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e06b      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e6:	4b39      	ldr	r3, [pc, #228]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f023 0203 	bic.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4936      	ldr	r1, [pc, #216]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f8:	f7fd ff2e 	bl	8001058 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003200:	f7fd ff2a 	bl	8001058 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e053      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	4b2d      	ldr	r3, [pc, #180]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 020c 	and.w	r2, r3, #12
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	429a      	cmp	r2, r3
 8003226:	d1eb      	bne.n	8003200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003228:	4b27      	ldr	r3, [pc, #156]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d210      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b24      	ldr	r3, [pc, #144]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 0207 	bic.w	r2, r3, #7
 800323e:	4922      	ldr	r1, [pc, #136]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b20      	ldr	r3, [pc, #128]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e032      	b.n	80032be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003264:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4916      	ldr	r1, [pc, #88]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003282:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	490e      	ldr	r1, [pc, #56]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003296:	f000 f821 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 800329a:	4602      	mov	r2, r0
 800329c:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	490a      	ldr	r1, [pc, #40]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	5ccb      	ldrb	r3, [r1, r3]
 80032aa:	fa22 f303 	lsr.w	r3, r2, r3
 80032ae:	4a09      	ldr	r2, [pc, #36]	@ (80032d4 <HAL_RCC_ClockConfig+0x1cc>)
 80032b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032b2:	4b09      	ldr	r3, [pc, #36]	@ (80032d8 <HAL_RCC_ClockConfig+0x1d0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd fe8c 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40022000 	.word	0x40022000
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08005324 	.word	0x08005324
 80032d4:	20000000 	.word	0x20000000
 80032d8:	20000004 	.word	0x20000004

080032dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x94>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b04      	cmp	r3, #4
 8003304:	d002      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x30>
 8003306:	2b08      	cmp	r3, #8
 8003308:	d003      	beq.n	8003312 <HAL_RCC_GetSysClockFreq+0x36>
 800330a:	e027      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800330c:	4b19      	ldr	r3, [pc, #100]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x98>)
 800330e:	613b      	str	r3, [r7, #16]
      break;
 8003310:	e027      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	0c9b      	lsrs	r3, r3, #18
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	4a17      	ldr	r2, [pc, #92]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x9c>)
 800331c:	5cd3      	ldrb	r3, [r2, r3]
 800331e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d010      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800332a:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x94>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	0c5b      	lsrs	r3, r3, #17
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	4a11      	ldr	r2, [pc, #68]	@ (800337c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003336:	5cd3      	ldrb	r3, [r2, r3]
 8003338:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a0d      	ldr	r2, [pc, #52]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x98>)
 800333e:	fb03 f202 	mul.w	r2, r3, r2
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	e004      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0c      	ldr	r2, [pc, #48]	@ (8003380 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	613b      	str	r3, [r7, #16]
      break;
 800335a:	e002      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800335c:	4b05      	ldr	r3, [pc, #20]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x98>)
 800335e:	613b      	str	r3, [r7, #16]
      break;
 8003360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003362:	693b      	ldr	r3, [r7, #16]
}
 8003364:	4618      	mov	r0, r3
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	007a1200 	.word	0x007a1200
 8003378:	0800533c 	.word	0x0800533c
 800337c:	0800534c 	.word	0x0800534c
 8003380:	003d0900 	.word	0x003d0900

08003384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003388:	4b02      	ldr	r3, [pc, #8]	@ (8003394 <HAL_RCC_GetHCLKFreq+0x10>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	20000000 	.word	0x20000000

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800339c:	f7ff fff2 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4903      	ldr	r1, [pc, #12]	@ (80033bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08005334 	.word	0x08005334

080033c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033c4:	f7ff ffde 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0adb      	lsrs	r3, r3, #11
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	@ (80033e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08005334 	.word	0x08005334

080033e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033f0:	4b0a      	ldr	r3, [pc, #40]	@ (800341c <RCC_Delay+0x34>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003420 <RCC_Delay+0x38>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	0a5b      	lsrs	r3, r3, #9
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003404:	bf00      	nop
  }
  while (Delay --);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1e5a      	subs	r2, r3, #1
 800340a:	60fa      	str	r2, [r7, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f9      	bne.n	8003404 <RCC_Delay+0x1c>
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	20000000 	.word	0x20000000
 8003420:	10624dd3 	.word	0x10624dd3

08003424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e076      	b.n	8003524 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d108      	bne.n	8003450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003446:	d009      	beq.n	800345c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	61da      	str	r2, [r3, #28]
 800344e:	e005      	b.n	800345c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fba6 	bl	8000bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e0:	ea42 0103 	orr.w	r1, r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	0c1a      	lsrs	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f002 0204 	and.w	r2, r2, #4
 8003502:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003512:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e041      	b.n	80035c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd fb82 	bl	8000c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f000 fa10 	bl	8003990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e041      	b.n	8003660 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f839 	bl	8003668 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3304      	adds	r3, #4
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f000 f9c1 	bl	8003990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
	...

0800367c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003696:	2302      	movs	r3, #2
 8003698:	e0ae      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b0c      	cmp	r3, #12
 80036a6:	f200 809f 	bhi.w	80037e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036aa:	a201      	add	r2, pc, #4	@ (adr r2, 80036b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b0:	080036e5 	.word	0x080036e5
 80036b4:	080037e9 	.word	0x080037e9
 80036b8:	080037e9 	.word	0x080037e9
 80036bc:	080037e9 	.word	0x080037e9
 80036c0:	08003725 	.word	0x08003725
 80036c4:	080037e9 	.word	0x080037e9
 80036c8:	080037e9 	.word	0x080037e9
 80036cc:	080037e9 	.word	0x080037e9
 80036d0:	08003767 	.word	0x08003767
 80036d4:	080037e9 	.word	0x080037e9
 80036d8:	080037e9 	.word	0x080037e9
 80036dc:	080037e9 	.word	0x080037e9
 80036e0:	080037a7 	.word	0x080037a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f9be 	bl	8003a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0208 	orr.w	r2, r2, #8
 80036fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0204 	bic.w	r2, r2, #4
 800370e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6999      	ldr	r1, [r3, #24]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	619a      	str	r2, [r3, #24]
      break;
 8003722:	e064      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fa04 	bl	8003b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800373e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800374e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6999      	ldr	r1, [r3, #24]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	021a      	lsls	r2, r3, #8
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	619a      	str	r2, [r3, #24]
      break;
 8003764:	e043      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fa4d 	bl	8003c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0208 	orr.w	r2, r2, #8
 8003780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0204 	bic.w	r2, r2, #4
 8003790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69d9      	ldr	r1, [r3, #28]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	61da      	str	r2, [r3, #28]
      break;
 80037a4:	e023      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fa97 	bl	8003ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69d9      	ldr	r1, [r3, #28]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	021a      	lsls	r2, r3, #8
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	61da      	str	r2, [r3, #28]
      break;
 80037e6:	e002      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	75fb      	strb	r3, [r7, #23]
      break;
 80037ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_TIM_ConfigClockSource+0x1c>
 8003818:	2302      	movs	r3, #2
 800381a:	e0b4      	b.n	8003986 <HAL_TIM_ConfigClockSource+0x186>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800383a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003842:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003854:	d03e      	beq.n	80038d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800385a:	f200 8087 	bhi.w	800396c <HAL_TIM_ConfigClockSource+0x16c>
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003862:	f000 8086 	beq.w	8003972 <HAL_TIM_ConfigClockSource+0x172>
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800386a:	d87f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 800386c:	2b70      	cmp	r3, #112	@ 0x70
 800386e:	d01a      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003870:	2b70      	cmp	r3, #112	@ 0x70
 8003872:	d87b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 8003874:	2b60      	cmp	r3, #96	@ 0x60
 8003876:	d050      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x11a>
 8003878:	2b60      	cmp	r3, #96	@ 0x60
 800387a:	d877      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 800387c:	2b50      	cmp	r3, #80	@ 0x50
 800387e:	d03c      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0xfa>
 8003880:	2b50      	cmp	r3, #80	@ 0x50
 8003882:	d873      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 8003884:	2b40      	cmp	r3, #64	@ 0x40
 8003886:	d058      	beq.n	800393a <HAL_TIM_ConfigClockSource+0x13a>
 8003888:	2b40      	cmp	r3, #64	@ 0x40
 800388a:	d86f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 800388c:	2b30      	cmp	r3, #48	@ 0x30
 800388e:	d064      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15a>
 8003890:	2b30      	cmp	r3, #48	@ 0x30
 8003892:	d86b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d060      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15a>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d867      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d05c      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15a>
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d05a      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15a>
 80038a4:	e062      	b.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b6:	f000 fad8 	bl	8003e6a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	609a      	str	r2, [r3, #8]
      break;
 80038d2:	e04f      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038e4:	f000 fac1 	bl	8003e6a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038f6:	609a      	str	r2, [r3, #8]
      break;
 80038f8:	e03c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003906:	461a      	mov	r2, r3
 8003908:	f000 fa38 	bl	8003d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2150      	movs	r1, #80	@ 0x50
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fa8f 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003918:	e02c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003926:	461a      	mov	r2, r3
 8003928:	f000 fa56 	bl	8003dd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2160      	movs	r1, #96	@ 0x60
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fa7f 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003938:	e01c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003946:	461a      	mov	r2, r3
 8003948:	f000 fa18 	bl	8003d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2140      	movs	r1, #64	@ 0x40
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fa6f 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003958:	e00c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f000 fa66 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 800396a:	e003      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      break;
 8003970:	e000      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003a60 <TIM_Base_SetConfig+0xd0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00b      	beq.n	80039c0 <TIM_Base_SetConfig+0x30>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ae:	d007      	beq.n	80039c0 <TIM_Base_SetConfig+0x30>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a64 <TIM_Base_SetConfig+0xd4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_Base_SetConfig+0x30>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003a68 <TIM_Base_SetConfig+0xd8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a22      	ldr	r2, [pc, #136]	@ (8003a60 <TIM_Base_SetConfig+0xd0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <TIM_Base_SetConfig+0x62>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e0:	d007      	beq.n	80039f2 <TIM_Base_SetConfig+0x62>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a64 <TIM_Base_SetConfig+0xd4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d003      	beq.n	80039f2 <TIM_Base_SetConfig+0x62>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003a68 <TIM_Base_SetConfig+0xd8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d108      	bne.n	8003a04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8003a60 <TIM_Base_SetConfig+0xd0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d103      	bne.n	8003a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f023 0201 	bic.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	611a      	str	r2, [r3, #16]
  }
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800

08003a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f023 0201 	bic.w	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0303 	bic.w	r3, r3, #3
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f023 0302 	bic.w	r3, r3, #2
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <TIM_OC1_SetConfig+0xc8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d10c      	bne.n	8003ae2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f023 0308 	bic.w	r3, r3, #8
 8003ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 0304 	bic.w	r3, r3, #4
 8003ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a13      	ldr	r2, [pc, #76]	@ (8003b34 <TIM_OC1_SetConfig+0xc8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d111      	bne.n	8003b0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	621a      	str	r2, [r3, #32]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40012c00 	.word	0x40012c00

08003b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f023 0210 	bic.w	r2, r3, #16
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f023 0320 	bic.w	r3, r3, #32
 8003b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a1d      	ldr	r2, [pc, #116]	@ (8003c08 <TIM_OC2_SetConfig+0xd0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d10d      	bne.n	8003bb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a14      	ldr	r2, [pc, #80]	@ (8003c08 <TIM_OC2_SetConfig+0xd0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d113      	bne.n	8003be4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	40012c00 	.word	0x40012c00

08003c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0303 	bic.w	r3, r3, #3
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1d      	ldr	r2, [pc, #116]	@ (8003cdc <TIM_OC3_SetConfig+0xd0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10d      	bne.n	8003c86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a14      	ldr	r2, [pc, #80]	@ (8003cdc <TIM_OC3_SetConfig+0xd0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d113      	bne.n	8003cb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	621a      	str	r2, [r3, #32]
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40012c00 	.word	0x40012c00

08003ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	031b      	lsls	r3, r3, #12
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8003d78 <TIM_OC4_SetConfig+0x98>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d109      	bne.n	8003d54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	40012c00 	.word	0x40012c00

08003d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f023 0201 	bic.w	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 030a 	bic.w	r3, r3, #10
 8003db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f023 0210 	bic.w	r2, r3, #16
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	031b      	lsls	r3, r3, #12
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	621a      	str	r2, [r3, #32]
}
 8003e2c:	bf00      	nop
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr

08003e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f043 0307 	orr.w	r3, r3, #7
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b087      	sub	sp, #28
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	021a      	lsls	r2, r3, #8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	609a      	str	r2, [r3, #8]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e046      	b.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a16      	ldr	r2, [pc, #88]	@ (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0c:	d009      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a12      	ldr	r2, [pc, #72]	@ (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a10      	ldr	r2, [pc, #64]	@ (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10c      	bne.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800

08003f64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e03d      	b.n	8003ffc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e042      	b.n	800409e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d106      	bne.n	8004032 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fc fe67 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2224      	movs	r2, #36	@ 0x24
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004048:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 ff62 	bl	8004f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800405e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800406e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800407e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08c      	sub	sp, #48	@ 0x30
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d156      	bne.n	8004170 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_UART_Transmit_DMA+0x26>
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e04f      	b.n	8004172 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	88fa      	ldrh	r2, [r7, #6]
 80040e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2221      	movs	r2, #33	@ 0x21
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f6:	4a21      	ldr	r2, [pc, #132]	@ (800417c <HAL_UART_Transmit_DMA+0xd4>)
 80040f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	4a20      	ldr	r2, [pc, #128]	@ (8004180 <HAL_UART_Transmit_DMA+0xd8>)
 8004100:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004106:	4a1f      	ldr	r2, [pc, #124]	@ (8004184 <HAL_UART_Transmit_DMA+0xdc>)
 8004108:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410e:	2200      	movs	r2, #0
 8004110:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3304      	adds	r3, #4
 8004126:	461a      	mov	r2, r3
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	f7fd f907 	bl	800133c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004136:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3314      	adds	r3, #20
 800413e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	617b      	str	r3, [r7, #20]
   return(result);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800414e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3314      	adds	r3, #20
 8004156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004158:	627a      	str	r2, [r7, #36]	@ 0x24
 800415a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6a39      	ldr	r1, [r7, #32]
 800415e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	61fb      	str	r3, [r7, #28]
   return(result);
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e5      	bne.n	8004138 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	3730      	adds	r7, #48	@ 0x30
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	080047a9 	.word	0x080047a9
 8004180:	08004843 	.word	0x08004843
 8004184:	080049c7 	.word	0x080049c7

08004188 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08c      	sub	sp, #48	@ 0x30
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d146      	bne.n	8004230 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e03f      	b.n	8004232 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	461a      	mov	r2, r3
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fc49 	bl	8004a5c <UART_Start_Receive_DMA>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d125      	bne.n	8004224 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	617b      	str	r3, [r7, #20]
   return(result);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f043 0310 	orr.w	r3, r3, #16
 8004204:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800420e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6a39      	ldr	r1, [r7, #32]
 8004214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	61fb      	str	r3, [r7, #28]
   return(result);
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e5      	bne.n	80041ee <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8004222:	e002      	b.n	800422a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800422a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800422e:	e000      	b.n	8004232 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3730      	adds	r7, #48	@ 0x30
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b0ba      	sub	sp, #232	@ 0xe8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800427a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10f      	bne.n	80042a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_UART_IRQHandler+0x66>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fd7c 	bl	8004d98 <UART_Receive_IT>
      return;
 80042a0:	e25b      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80de 	beq.w	8004468 <HAL_UART_IRQHandler+0x22c>
 80042ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80d1 	beq.w	8004468 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_UART_IRQHandler+0xae>
 80042d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e2:	f043 0201 	orr.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <HAL_UART_IRQHandler+0xd2>
 80042f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	f043 0202 	orr.w	r2, r3, #2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00b      	beq.n	8004332 <HAL_UART_IRQHandler+0xf6>
 800431a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432a:	f043 0204 	orr.w	r2, r3, #4
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d011      	beq.n	8004362 <HAL_UART_IRQHandler+0x126>
 800433e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d105      	bne.n	8004356 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800434a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	f043 0208 	orr.w	r2, r3, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 81f2 	beq.w	8004750 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_UART_IRQHandler+0x14e>
 8004378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fd07 	bl	8004d98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <HAL_UART_IRQHandler+0x17a>
 80043ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d04f      	beq.n	8004456 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fc11 	bl	8004bde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d041      	beq.n	800444e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3314      	adds	r3, #20
 80043d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3314      	adds	r3, #20
 80043f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800440e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1d9      	bne.n	80043ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d013      	beq.n	8004446 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004422:	4a7e      	ldr	r2, [pc, #504]	@ (800461c <HAL_UART_IRQHandler+0x3e0>)
 8004424:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd f822 	bl	8001474 <HAL_DMA_Abort_IT>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d016      	beq.n	8004464 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004440:	4610      	mov	r0, r2
 8004442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	e00e      	b.n	8004464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f9a5 	bl	8004796 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	e00a      	b.n	8004464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f9a1 	bl	8004796 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	e006      	b.n	8004464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f99d 	bl	8004796 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004462:	e175      	b.n	8004750 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004464:	bf00      	nop
    return;
 8004466:	e173      	b.n	8004750 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	2b01      	cmp	r3, #1
 800446e:	f040 814f 	bne.w	8004710 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8148 	beq.w	8004710 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8141 	beq.w	8004710 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80b6 	beq.w	8004620 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8145 	beq.w	8004754 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044d2:	429a      	cmp	r2, r3
 80044d4:	f080 813e 	bcs.w	8004754 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	f000 8088 	beq.w	80045fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004502:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004506:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800450a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004518:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800451c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004524:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004530:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1d9      	bne.n	80044ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004548:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800455c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004560:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004564:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800456e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e1      	bne.n	8004538 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3314      	adds	r3, #20
 800457a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004584:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800458a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3314      	adds	r3, #20
 8004594:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004598:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800459a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800459e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e3      	bne.n	8004574 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	330c      	adds	r3, #12
 80045c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045cc:	f023 0310 	bic.w	r3, r3, #16
 80045d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045de:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045e0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e3      	bne.n	80045ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fc ff00 	bl	80013fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800460a:	b29b      	uxth	r3, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	b29b      	uxth	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fb ff2e 	bl	8000474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004618:	e09c      	b.n	8004754 <HAL_UART_IRQHandler+0x518>
 800461a:	bf00      	nop
 800461c:	08004ca3 	.word	0x08004ca3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004628:	b29b      	uxth	r3, r3
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 808e 	beq.w	8004758 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800463c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8089 	beq.w	8004758 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004658:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800465c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800466a:	647a      	str	r2, [r7, #68]	@ 0x44
 800466c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e3      	bne.n	8004646 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3314      	adds	r3, #20
 8004684:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	623b      	str	r3, [r7, #32]
   return(result);
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3314      	adds	r3, #20
 800469e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80046a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e3      	bne.n	800467e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0310 	bic.w	r3, r3, #16
 80046da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80046e8:	61fa      	str	r2, [r7, #28]
 80046ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	69b9      	ldr	r1, [r7, #24]
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	617b      	str	r3, [r7, #20]
   return(result);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e3      	bne.n	80046c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004702:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fb feb3 	bl	8000474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800470e:	e023      	b.n	8004758 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <HAL_UART_IRQHandler+0x4f4>
 800471c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 face 	bl	8004cca <UART_Transmit_IT>
    return;
 800472e:	e014      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <HAL_UART_IRQHandler+0x51e>
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fb0d 	bl	8004d68 <UART_EndTransmit_IT>
    return;
 800474e:	e004      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
    return;
 8004750:	bf00      	nop
 8004752:	e002      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
      return;
 8004754:	bf00      	nop
 8004756:	e000      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
      return;
 8004758:	bf00      	nop
  }
}
 800475a:	37e8      	adds	r7, #232	@ 0xe8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b090      	sub	sp, #64	@ 0x40
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d137      	bne.n	8004834 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80047c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c6:	2200      	movs	r2, #0
 80047c8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3314      	adds	r3, #20
 80047d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	623b      	str	r3, [r7, #32]
   return(result);
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3314      	adds	r3, #20
 80047e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	330c      	adds	r3, #12
 8004804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	60fb      	str	r3, [r7, #12]
   return(result);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004814:	637b      	str	r3, [r7, #52]	@ 0x34
 8004816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	330c      	adds	r3, #12
 800481c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800481e:	61fa      	str	r2, [r7, #28]
 8004820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	617b      	str	r3, [r7, #20]
   return(result);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e5      	bne.n	80047fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004832:	e002      	b.n	800483a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004834:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004836:	f7fb fe43 	bl	80004c0 <HAL_UART_TxCpltCallback>
}
 800483a:	bf00      	nop
 800483c:	3740      	adds	r7, #64	@ 0x40
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff ff85 	bl	8004760 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b09c      	sub	sp, #112	@ 0x70
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d172      	bne.n	8004960 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800487a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800487c:	2200      	movs	r2, #0
 800487e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004892:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004896:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80048a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e5      	bne.n	8004880 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3314      	adds	r3, #20
 80048ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80048cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3314      	adds	r3, #20
 80048d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80048d4:	647a      	str	r2, [r7, #68]	@ 0x44
 80048d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3314      	adds	r3, #20
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	623b      	str	r3, [r7, #32]
   return(result);
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3314      	adds	r3, #20
 8004906:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004908:	633a      	str	r2, [r7, #48]	@ 0x30
 800490a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800490e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e5      	bne.n	80048e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800491c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	2b01      	cmp	r3, #1
 800492a:	d119      	bne.n	8004960 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	60fb      	str	r3, [r7, #12]
   return(result);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0310 	bic.w	r3, r3, #16
 8004942:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800494c:	61fa      	str	r2, [r7, #28]
 800494e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	69b9      	ldr	r1, [r7, #24]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	617b      	str	r3, [r7, #20]
   return(result);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004962:	2200      	movs	r2, #0
 8004964:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	2b01      	cmp	r3, #1
 800496c:	d106      	bne.n	800497c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800496e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004970:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004972:	4619      	mov	r1, r3
 8004974:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004976:	f7fb fd7d 	bl	8000474 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800497a:	e002      	b.n	8004982 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800497c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800497e:	f7ff fef8 	bl	8004772 <HAL_UART_RxCpltCallback>
}
 8004982:	bf00      	nop
 8004984:	3770      	adds	r7, #112	@ 0x70
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d108      	bne.n	80049b8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049aa:	085b      	lsrs	r3, r3, #1
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	4619      	mov	r1, r3
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f7fb fd5f 	bl	8000474 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049b6:	e002      	b.n	80049be <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff fee3 	bl	8004784 <HAL_UART_RxHalfCpltCallback>
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b21      	cmp	r3, #33	@ 0x21
 80049f8:	d108      	bne.n	8004a0c <UART_DMAError+0x46>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2200      	movs	r2, #0
 8004a04:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004a06:	68b8      	ldr	r0, [r7, #8]
 8004a08:	f000 f8c2 	bl	8004b90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf14      	ite	ne
 8004a1a:	2301      	movne	r3, #1
 8004a1c:	2300      	moveq	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b22      	cmp	r3, #34	@ 0x22
 8004a2c:	d108      	bne.n	8004a40 <UART_DMAError+0x7a>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2200      	movs	r2, #0
 8004a38:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004a3a:	68b8      	ldr	r0, [r7, #8]
 8004a3c:	f000 f8cf 	bl	8004bde <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a44:	f043 0210 	orr.w	r2, r3, #16
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a4c:	68b8      	ldr	r0, [r7, #8]
 8004a4e:	f7ff fea2 	bl	8004796 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b098      	sub	sp, #96	@ 0x60
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2222      	movs	r2, #34	@ 0x22
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a88:	4a3e      	ldr	r2, [pc, #248]	@ (8004b84 <UART_Start_Receive_DMA+0x128>)
 8004a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a90:	4a3d      	ldr	r2, [pc, #244]	@ (8004b88 <UART_Start_Receive_DMA+0x12c>)
 8004a92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a98:	4a3c      	ldr	r2, [pc, #240]	@ (8004b8c <UART_Start_Receive_DMA+0x130>)
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004aa4:	f107 0308 	add.w	r3, r7, #8
 8004aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	f7fc fc3e 	bl	800133c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d019      	beq.n	8004b12 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	330c      	adds	r3, #12
 8004ae4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004afe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004b00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004b04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e5      	bne.n	8004ade <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3314      	adds	r3, #20
 8004b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3314      	adds	r3, #20
 8004b30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b32:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004b34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004b38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e5      	bne.n	8004b12 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3314      	adds	r3, #20
 8004b4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	617b      	str	r3, [r7, #20]
   return(result);
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b66:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	6a39      	ldr	r1, [r7, #32]
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e5      	bne.n	8004b46 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3760      	adds	r7, #96	@ 0x60
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	0800485f 	.word	0x0800485f
 8004b88:	0800498b 	.word	0x0800498b
 8004b8c:	080049c7 	.word	0x080049c7

08004b90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b089      	sub	sp, #36	@ 0x24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	61ba      	str	r2, [r7, #24]
 8004bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e5      	bne.n	8004b98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004bd4:	bf00      	nop
 8004bd6:	3724      	adds	r7, #36	@ 0x24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr

08004bde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b095      	sub	sp, #84	@ 0x54
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c06:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e5      	bne.n	8004be6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3314      	adds	r3, #20
 8004c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3314      	adds	r3, #20
 8004c38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d119      	bne.n	8004c8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f023 0310 	bic.w	r3, r3, #16
 8004c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	330c      	adds	r3, #12
 8004c74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c76:	61ba      	str	r2, [r7, #24]
 8004c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6979      	ldr	r1, [r7, #20]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	613b      	str	r3, [r7, #16]
   return(result);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e5      	bne.n	8004c56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c98:	bf00      	nop
 8004c9a:	3754      	adds	r7, #84	@ 0x54
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff fd6a 	bl	8004796 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b21      	cmp	r3, #33	@ 0x21
 8004cdc:	d13e      	bne.n	8004d5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce6:	d114      	bne.n	8004d12 <UART_Transmit_IT+0x48>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d110      	bne.n	8004d12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	1c9a      	adds	r2, r3, #2
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	621a      	str	r2, [r3, #32]
 8004d10:	e008      	b.n	8004d24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	1c59      	adds	r1, r3, #1
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6211      	str	r1, [r2, #32]
 8004d1c:	781a      	ldrb	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4619      	mov	r1, r3
 8004d32:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10f      	bne.n	8004d58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e000      	b.n	8004d5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d5c:	2302      	movs	r3, #2
  }
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fb fb99 	bl	80004c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08c      	sub	sp, #48	@ 0x30
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b22      	cmp	r3, #34	@ 0x22
 8004daa:	f040 80ae 	bne.w	8004f0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db6:	d117      	bne.n	8004de8 <UART_Receive_IT+0x50>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d113      	bne.n	8004de8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	1c9a      	adds	r2, r3, #2
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004de6:	e026      	b.n	8004e36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dfa:	d007      	beq.n	8004e0c <UART_Receive_IT+0x74>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <UART_Receive_IT+0x82>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	e008      	b.n	8004e2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	4619      	mov	r1, r3
 8004e44:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d15d      	bne.n	8004f06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0220 	bic.w	r2, r2, #32
 8004e58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d135      	bne.n	8004efc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f023 0310 	bic.w	r3, r3, #16
 8004eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb6:	623a      	str	r2, [r7, #32]
 8004eb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	69f9      	ldr	r1, [r7, #28]
 8004ebc:	6a3a      	ldr	r2, [r7, #32]
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e5      	bne.n	8004e96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d10a      	bne.n	8004eee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fb fabd 	bl	8000474 <HAL_UARTEx_RxEventCallback>
 8004efa:	e002      	b.n	8004f02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fc38 	bl	8004772 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	e002      	b.n	8004f0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e000      	b.n	8004f0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
  }
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3730      	adds	r7, #48	@ 0x30
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f4e:	f023 030c 	bic.w	r3, r3, #12
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2c      	ldr	r2, [pc, #176]	@ (8005028 <UART_SetConfig+0x114>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d103      	bne.n	8004f84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f7c:	f7fe fa20 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	e002      	b.n	8004f8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f84:	f7fe fa08 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004f88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	009a      	lsls	r2, r3, #2
 8004f94:	441a      	add	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	4a22      	ldr	r2, [pc, #136]	@ (800502c <UART_SetConfig+0x118>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	0119      	lsls	r1, r3, #4
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009a      	lsls	r2, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <UART_SetConfig+0x118>)
 8004fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	2064      	movs	r0, #100	@ 0x64
 8004fca:	fb00 f303 	mul.w	r3, r0, r3
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	3332      	adds	r3, #50	@ 0x32
 8004fd4:	4a15      	ldr	r2, [pc, #84]	@ (800502c <UART_SetConfig+0x118>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fe0:	4419      	add	r1, r3
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	009a      	lsls	r2, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800502c <UART_SetConfig+0x118>)
 8004ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	2064      	movs	r0, #100	@ 0x64
 8005002:	fb00 f303 	mul.w	r3, r0, r3
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	3332      	adds	r3, #50	@ 0x32
 800500c:	4a07      	ldr	r2, [pc, #28]	@ (800502c <UART_SetConfig+0x118>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	f003 020f 	and.w	r2, r3, #15
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	440a      	add	r2, r1
 800501e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40013800 	.word	0x40013800
 800502c:	51eb851f 	.word	0x51eb851f

08005030 <calloc>:
 8005030:	4b02      	ldr	r3, [pc, #8]	@ (800503c <calloc+0xc>)
 8005032:	460a      	mov	r2, r1
 8005034:	4601      	mov	r1, r0
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	f000 b802 	b.w	8005040 <_calloc_r>
 800503c:	2000000c 	.word	0x2000000c

08005040 <_calloc_r>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	fba1 5402 	umull	r5, r4, r1, r2
 8005046:	b93c      	cbnz	r4, 8005058 <_calloc_r+0x18>
 8005048:	4629      	mov	r1, r5
 800504a:	f000 f837 	bl	80050bc <_malloc_r>
 800504e:	4606      	mov	r6, r0
 8005050:	b928      	cbnz	r0, 800505e <_calloc_r+0x1e>
 8005052:	2600      	movs	r6, #0
 8005054:	4630      	mov	r0, r6
 8005056:	bd70      	pop	{r4, r5, r6, pc}
 8005058:	220c      	movs	r2, #12
 800505a:	6002      	str	r2, [r0, #0]
 800505c:	e7f9      	b.n	8005052 <_calloc_r+0x12>
 800505e:	462a      	mov	r2, r5
 8005060:	4621      	mov	r1, r4
 8005062:	f000 f8b7 	bl	80051d4 <memset>
 8005066:	e7f5      	b.n	8005054 <_calloc_r+0x14>

08005068 <free>:
 8005068:	4b02      	ldr	r3, [pc, #8]	@ (8005074 <free+0xc>)
 800506a:	4601      	mov	r1, r0
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	f000 b903 	b.w	8005278 <_free_r>
 8005072:	bf00      	nop
 8005074:	2000000c 	.word	0x2000000c

08005078 <sbrk_aligned>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	4e0f      	ldr	r6, [pc, #60]	@ (80050b8 <sbrk_aligned+0x40>)
 800507c:	460c      	mov	r4, r1
 800507e:	6831      	ldr	r1, [r6, #0]
 8005080:	4605      	mov	r5, r0
 8005082:	b911      	cbnz	r1, 800508a <sbrk_aligned+0x12>
 8005084:	f000 f8ae 	bl	80051e4 <_sbrk_r>
 8005088:	6030      	str	r0, [r6, #0]
 800508a:	4621      	mov	r1, r4
 800508c:	4628      	mov	r0, r5
 800508e:	f000 f8a9 	bl	80051e4 <_sbrk_r>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	d103      	bne.n	800509e <sbrk_aligned+0x26>
 8005096:	f04f 34ff 	mov.w	r4, #4294967295
 800509a:	4620      	mov	r0, r4
 800509c:	bd70      	pop	{r4, r5, r6, pc}
 800509e:	1cc4      	adds	r4, r0, #3
 80050a0:	f024 0403 	bic.w	r4, r4, #3
 80050a4:	42a0      	cmp	r0, r4
 80050a6:	d0f8      	beq.n	800509a <sbrk_aligned+0x22>
 80050a8:	1a21      	subs	r1, r4, r0
 80050aa:	4628      	mov	r0, r5
 80050ac:	f000 f89a 	bl	80051e4 <_sbrk_r>
 80050b0:	3001      	adds	r0, #1
 80050b2:	d1f2      	bne.n	800509a <sbrk_aligned+0x22>
 80050b4:	e7ef      	b.n	8005096 <sbrk_aligned+0x1e>
 80050b6:	bf00      	nop
 80050b8:	20001778 	.word	0x20001778

080050bc <_malloc_r>:
 80050bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c0:	1ccd      	adds	r5, r1, #3
 80050c2:	f025 0503 	bic.w	r5, r5, #3
 80050c6:	3508      	adds	r5, #8
 80050c8:	2d0c      	cmp	r5, #12
 80050ca:	bf38      	it	cc
 80050cc:	250c      	movcc	r5, #12
 80050ce:	2d00      	cmp	r5, #0
 80050d0:	4606      	mov	r6, r0
 80050d2:	db01      	blt.n	80050d8 <_malloc_r+0x1c>
 80050d4:	42a9      	cmp	r1, r5
 80050d6:	d904      	bls.n	80050e2 <_malloc_r+0x26>
 80050d8:	230c      	movs	r3, #12
 80050da:	6033      	str	r3, [r6, #0]
 80050dc:	2000      	movs	r0, #0
 80050de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051b8 <_malloc_r+0xfc>
 80050e6:	f000 f869 	bl	80051bc <__malloc_lock>
 80050ea:	f8d8 3000 	ldr.w	r3, [r8]
 80050ee:	461c      	mov	r4, r3
 80050f0:	bb44      	cbnz	r4, 8005144 <_malloc_r+0x88>
 80050f2:	4629      	mov	r1, r5
 80050f4:	4630      	mov	r0, r6
 80050f6:	f7ff ffbf 	bl	8005078 <sbrk_aligned>
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	4604      	mov	r4, r0
 80050fe:	d158      	bne.n	80051b2 <_malloc_r+0xf6>
 8005100:	f8d8 4000 	ldr.w	r4, [r8]
 8005104:	4627      	mov	r7, r4
 8005106:	2f00      	cmp	r7, #0
 8005108:	d143      	bne.n	8005192 <_malloc_r+0xd6>
 800510a:	2c00      	cmp	r4, #0
 800510c:	d04b      	beq.n	80051a6 <_malloc_r+0xea>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	4639      	mov	r1, r7
 8005112:	4630      	mov	r0, r6
 8005114:	eb04 0903 	add.w	r9, r4, r3
 8005118:	f000 f864 	bl	80051e4 <_sbrk_r>
 800511c:	4581      	cmp	r9, r0
 800511e:	d142      	bne.n	80051a6 <_malloc_r+0xea>
 8005120:	6821      	ldr	r1, [r4, #0]
 8005122:	4630      	mov	r0, r6
 8005124:	1a6d      	subs	r5, r5, r1
 8005126:	4629      	mov	r1, r5
 8005128:	f7ff ffa6 	bl	8005078 <sbrk_aligned>
 800512c:	3001      	adds	r0, #1
 800512e:	d03a      	beq.n	80051a6 <_malloc_r+0xea>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	442b      	add	r3, r5
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	f8d8 3000 	ldr.w	r3, [r8]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	bb62      	cbnz	r2, 8005198 <_malloc_r+0xdc>
 800513e:	f8c8 7000 	str.w	r7, [r8]
 8005142:	e00f      	b.n	8005164 <_malloc_r+0xa8>
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	1b52      	subs	r2, r2, r5
 8005148:	d420      	bmi.n	800518c <_malloc_r+0xd0>
 800514a:	2a0b      	cmp	r2, #11
 800514c:	d917      	bls.n	800517e <_malloc_r+0xc2>
 800514e:	1961      	adds	r1, r4, r5
 8005150:	42a3      	cmp	r3, r4
 8005152:	6025      	str	r5, [r4, #0]
 8005154:	bf18      	it	ne
 8005156:	6059      	strne	r1, [r3, #4]
 8005158:	6863      	ldr	r3, [r4, #4]
 800515a:	bf08      	it	eq
 800515c:	f8c8 1000 	streq.w	r1, [r8]
 8005160:	5162      	str	r2, [r4, r5]
 8005162:	604b      	str	r3, [r1, #4]
 8005164:	4630      	mov	r0, r6
 8005166:	f000 f82f 	bl	80051c8 <__malloc_unlock>
 800516a:	f104 000b 	add.w	r0, r4, #11
 800516e:	1d23      	adds	r3, r4, #4
 8005170:	f020 0007 	bic.w	r0, r0, #7
 8005174:	1ac2      	subs	r2, r0, r3
 8005176:	bf1c      	itt	ne
 8005178:	1a1b      	subne	r3, r3, r0
 800517a:	50a3      	strne	r3, [r4, r2]
 800517c:	e7af      	b.n	80050de <_malloc_r+0x22>
 800517e:	6862      	ldr	r2, [r4, #4]
 8005180:	42a3      	cmp	r3, r4
 8005182:	bf0c      	ite	eq
 8005184:	f8c8 2000 	streq.w	r2, [r8]
 8005188:	605a      	strne	r2, [r3, #4]
 800518a:	e7eb      	b.n	8005164 <_malloc_r+0xa8>
 800518c:	4623      	mov	r3, r4
 800518e:	6864      	ldr	r4, [r4, #4]
 8005190:	e7ae      	b.n	80050f0 <_malloc_r+0x34>
 8005192:	463c      	mov	r4, r7
 8005194:	687f      	ldr	r7, [r7, #4]
 8005196:	e7b6      	b.n	8005106 <_malloc_r+0x4a>
 8005198:	461a      	mov	r2, r3
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	42a3      	cmp	r3, r4
 800519e:	d1fb      	bne.n	8005198 <_malloc_r+0xdc>
 80051a0:	2300      	movs	r3, #0
 80051a2:	6053      	str	r3, [r2, #4]
 80051a4:	e7de      	b.n	8005164 <_malloc_r+0xa8>
 80051a6:	230c      	movs	r3, #12
 80051a8:	4630      	mov	r0, r6
 80051aa:	6033      	str	r3, [r6, #0]
 80051ac:	f000 f80c 	bl	80051c8 <__malloc_unlock>
 80051b0:	e794      	b.n	80050dc <_malloc_r+0x20>
 80051b2:	6005      	str	r5, [r0, #0]
 80051b4:	e7d6      	b.n	8005164 <_malloc_r+0xa8>
 80051b6:	bf00      	nop
 80051b8:	2000177c 	.word	0x2000177c

080051bc <__malloc_lock>:
 80051bc:	4801      	ldr	r0, [pc, #4]	@ (80051c4 <__malloc_lock+0x8>)
 80051be:	f000 b84b 	b.w	8005258 <__retarget_lock_acquire_recursive>
 80051c2:	bf00      	nop
 80051c4:	200018bc 	.word	0x200018bc

080051c8 <__malloc_unlock>:
 80051c8:	4801      	ldr	r0, [pc, #4]	@ (80051d0 <__malloc_unlock+0x8>)
 80051ca:	f000 b846 	b.w	800525a <__retarget_lock_release_recursive>
 80051ce:	bf00      	nop
 80051d0:	200018bc 	.word	0x200018bc

080051d4 <memset>:
 80051d4:	4603      	mov	r3, r0
 80051d6:	4402      	add	r2, r0
 80051d8:	4293      	cmp	r3, r2
 80051da:	d100      	bne.n	80051de <memset+0xa>
 80051dc:	4770      	bx	lr
 80051de:	f803 1b01 	strb.w	r1, [r3], #1
 80051e2:	e7f9      	b.n	80051d8 <memset+0x4>

080051e4 <_sbrk_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	2300      	movs	r3, #0
 80051e8:	4d05      	ldr	r5, [pc, #20]	@ (8005200 <_sbrk_r+0x1c>)
 80051ea:	4604      	mov	r4, r0
 80051ec:	4608      	mov	r0, r1
 80051ee:	602b      	str	r3, [r5, #0]
 80051f0:	f7fb fe78 	bl	8000ee4 <_sbrk>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d102      	bne.n	80051fe <_sbrk_r+0x1a>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	b103      	cbz	r3, 80051fe <_sbrk_r+0x1a>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	200018b8 	.word	0x200018b8

08005204 <__errno>:
 8005204:	4b01      	ldr	r3, [pc, #4]	@ (800520c <__errno+0x8>)
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	2000000c 	.word	0x2000000c

08005210 <__libc_init_array>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	2600      	movs	r6, #0
 8005214:	4d0c      	ldr	r5, [pc, #48]	@ (8005248 <__libc_init_array+0x38>)
 8005216:	4c0d      	ldr	r4, [pc, #52]	@ (800524c <__libc_init_array+0x3c>)
 8005218:	1b64      	subs	r4, r4, r5
 800521a:	10a4      	asrs	r4, r4, #2
 800521c:	42a6      	cmp	r6, r4
 800521e:	d109      	bne.n	8005234 <__libc_init_array+0x24>
 8005220:	f000 f872 	bl	8005308 <_init>
 8005224:	2600      	movs	r6, #0
 8005226:	4d0a      	ldr	r5, [pc, #40]	@ (8005250 <__libc_init_array+0x40>)
 8005228:	4c0a      	ldr	r4, [pc, #40]	@ (8005254 <__libc_init_array+0x44>)
 800522a:	1b64      	subs	r4, r4, r5
 800522c:	10a4      	asrs	r4, r4, #2
 800522e:	42a6      	cmp	r6, r4
 8005230:	d105      	bne.n	800523e <__libc_init_array+0x2e>
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	f855 3b04 	ldr.w	r3, [r5], #4
 8005238:	4798      	blx	r3
 800523a:	3601      	adds	r6, #1
 800523c:	e7ee      	b.n	800521c <__libc_init_array+0xc>
 800523e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005242:	4798      	blx	r3
 8005244:	3601      	adds	r6, #1
 8005246:	e7f2      	b.n	800522e <__libc_init_array+0x1e>
 8005248:	08005350 	.word	0x08005350
 800524c:	08005350 	.word	0x08005350
 8005250:	08005350 	.word	0x08005350
 8005254:	08005354 	.word	0x08005354

08005258 <__retarget_lock_acquire_recursive>:
 8005258:	4770      	bx	lr

0800525a <__retarget_lock_release_recursive>:
 800525a:	4770      	bx	lr

0800525c <memcpy>:
 800525c:	440a      	add	r2, r1
 800525e:	4291      	cmp	r1, r2
 8005260:	f100 33ff 	add.w	r3, r0, #4294967295
 8005264:	d100      	bne.n	8005268 <memcpy+0xc>
 8005266:	4770      	bx	lr
 8005268:	b510      	push	{r4, lr}
 800526a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800526e:	4291      	cmp	r1, r2
 8005270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005274:	d1f9      	bne.n	800526a <memcpy+0xe>
 8005276:	bd10      	pop	{r4, pc}

08005278 <_free_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4605      	mov	r5, r0
 800527c:	2900      	cmp	r1, #0
 800527e:	d040      	beq.n	8005302 <_free_r+0x8a>
 8005280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005284:	1f0c      	subs	r4, r1, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	bfb8      	it	lt
 800528a:	18e4      	addlt	r4, r4, r3
 800528c:	f7ff ff96 	bl	80051bc <__malloc_lock>
 8005290:	4a1c      	ldr	r2, [pc, #112]	@ (8005304 <_free_r+0x8c>)
 8005292:	6813      	ldr	r3, [r2, #0]
 8005294:	b933      	cbnz	r3, 80052a4 <_free_r+0x2c>
 8005296:	6063      	str	r3, [r4, #4]
 8005298:	6014      	str	r4, [r2, #0]
 800529a:	4628      	mov	r0, r5
 800529c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052a0:	f7ff bf92 	b.w	80051c8 <__malloc_unlock>
 80052a4:	42a3      	cmp	r3, r4
 80052a6:	d908      	bls.n	80052ba <_free_r+0x42>
 80052a8:	6820      	ldr	r0, [r4, #0]
 80052aa:	1821      	adds	r1, r4, r0
 80052ac:	428b      	cmp	r3, r1
 80052ae:	bf01      	itttt	eq
 80052b0:	6819      	ldreq	r1, [r3, #0]
 80052b2:	685b      	ldreq	r3, [r3, #4]
 80052b4:	1809      	addeq	r1, r1, r0
 80052b6:	6021      	streq	r1, [r4, #0]
 80052b8:	e7ed      	b.n	8005296 <_free_r+0x1e>
 80052ba:	461a      	mov	r2, r3
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	b10b      	cbz	r3, 80052c4 <_free_r+0x4c>
 80052c0:	42a3      	cmp	r3, r4
 80052c2:	d9fa      	bls.n	80052ba <_free_r+0x42>
 80052c4:	6811      	ldr	r1, [r2, #0]
 80052c6:	1850      	adds	r0, r2, r1
 80052c8:	42a0      	cmp	r0, r4
 80052ca:	d10b      	bne.n	80052e4 <_free_r+0x6c>
 80052cc:	6820      	ldr	r0, [r4, #0]
 80052ce:	4401      	add	r1, r0
 80052d0:	1850      	adds	r0, r2, r1
 80052d2:	4283      	cmp	r3, r0
 80052d4:	6011      	str	r1, [r2, #0]
 80052d6:	d1e0      	bne.n	800529a <_free_r+0x22>
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4408      	add	r0, r1
 80052de:	6010      	str	r0, [r2, #0]
 80052e0:	6053      	str	r3, [r2, #4]
 80052e2:	e7da      	b.n	800529a <_free_r+0x22>
 80052e4:	d902      	bls.n	80052ec <_free_r+0x74>
 80052e6:	230c      	movs	r3, #12
 80052e8:	602b      	str	r3, [r5, #0]
 80052ea:	e7d6      	b.n	800529a <_free_r+0x22>
 80052ec:	6820      	ldr	r0, [r4, #0]
 80052ee:	1821      	adds	r1, r4, r0
 80052f0:	428b      	cmp	r3, r1
 80052f2:	bf01      	itttt	eq
 80052f4:	6819      	ldreq	r1, [r3, #0]
 80052f6:	685b      	ldreq	r3, [r3, #4]
 80052f8:	1809      	addeq	r1, r1, r0
 80052fa:	6021      	streq	r1, [r4, #0]
 80052fc:	6063      	str	r3, [r4, #4]
 80052fe:	6054      	str	r4, [r2, #4]
 8005300:	e7cb      	b.n	800529a <_free_r+0x22>
 8005302:	bd38      	pop	{r3, r4, r5, pc}
 8005304:	2000177c 	.word	0x2000177c

08005308 <_init>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	bf00      	nop
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr

08005314 <_fini>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	bf00      	nop
 8005318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531a:	bc08      	pop	{r3}
 800531c:	469e      	mov	lr, r3
 800531e:	4770      	bx	lr
